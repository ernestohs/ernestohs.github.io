SugarPackages = {"core":{"size":16812,"minified_size":2183,"extra":false,"modules":{"Core":{}},"description":"Internal utility and common methods."},"es5":{"size":15365,"minified_size":876,"extra":false,"modules":{"ES5":{},"Object":{},"Array":{"isArray":{"class_method":true,"params":[{"name":"obj","type":null,"required":true,"default":null}],"line":100,"returns":"Boolean","short":"Returns true if <obj> is an Array.","extra":"This method is provided for browsers that don't support it internally.","examples":[{"html":"Array.isArray(3)"},{"html":"Array.isArray(true)"},{"html":"Array.isArray('wasabi')"},{"html":"Array.isArray([1,2,3])"}]},"every":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"scope","type":null,"required":false,"default":null}],"line":123,"returns":"Boolean","short":"Returns true if all elements in the array match <f>.","extra":"[scope] is the %this% object. %all% is provided an alias. In addition to providing this method for browsers that don't support it natively, this method also implements @array_matching."},"some":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"scope","type":null,"required":false,"default":null}],"line":148,"returns":"Boolean","short":"Returns true if any element in the array matches <f>.","extra":"[scope] is the %this% object. %any% is provided as an alias. In addition to providing this method for browsers that don't support it natively, this method also implements @array_matching."},"map":{"params":[{"name":"map","type":null,"required":true,"default":null},{"name":"scope","type":null,"required":false,"default":null}],"line":176,"returns":"Array","short":"Maps the array to another array containing the values that are the result of calling <map> on each element.","extra":"[scope] is the %this% object. When <map> is a function, it receives three arguments: the current element, the current index, and a reference to the array. In addition to providing this method for browsers that don't support it natively, this enhanced method also directly accepts a string, which is a shortcut for a function that gets that property (or invokes a function) on each element.","examples":[{"multi_line":true,"html":"[1,2,3].map(function(n) {\\nreturn n * 3;\\n});"},{"multi_line":true,"html":"['one','two','three'].map(function(n) {\\nreturn n.length;\\n});"},{"html":"['one','two','three'].map('length')"}]},"filter":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"scope","type":null,"required":false,"default":null}],"line":204,"returns":"Array","short":"Returns any elements in the array that match <f>.","extra":"[scope] is the %this% object. In addition to providing this method for browsers that don't support it natively, this method also implements @array_matching.","examples":[{"multi_line":true,"force_result":true,"html":"   [1,2,3].filter(function(n) {\\nreturn n > 1;\\n});"},{"force_result":true,"html":"[1,2,2,4].filter(2)"}]},"indexOf":{"params":[{"name":"search","type":null,"required":true,"default":null},{"name":"fromIndex","type":null,"required":false,"default":null}],"line":230,"returns":"Number","short":"Searches the array and returns the first index where <search> occurs, or -1 if the element is not found.","extra":"[fromIndex] is the index from which to begin the search. This method performs a simple strict equality comparison on <search>. It does not support enhanced functionality such as searching the contents against a regex, callback, or deep comparison of objects. For such functionality, use the %findIndex% method instead.","examples":[{"html":"[1,2,3].indexOf(3)"},{"html":"[1,2,3].indexOf(7)"}]},"lastIndexOf":{"params":[{"name":"search","type":null,"required":true,"default":null},{"name":"fromIndex","type":null,"required":false,"default":null}],"line":247,"returns":"Number","short":"Searches the array and returns the last index where <search> occurs, or -1 if the element is not found.","extra":"[fromIndex] is the index from which to begin the search. This method performs a simple strict equality comparison on <search>.","examples":[{"html":"[1,2,1].lastIndexOf(1)"},{"html":"[1,2,1].lastIndexOf(7)"}]},"forEach":{"params":[{"name":"fn","type":null,"required":false,"default":null},{"name":"scope","type":null,"required":false,"default":null}],"line":264,"returns":"Nothing","short":"Iterates over the array, calling [fn] on each loop.","extra":"This method is only provided for those browsers that do not support it natively. [scope] becomes the %this% object.","examples":[{"multi_line":true,"html":"['a','b','c'].forEach(function(a) {\\n// Called 3 times: 'a','b','c'\\n});"}]},"reduce":{"params":[{"name":"fn","type":null,"required":true,"default":null},{"name":"init","type":null,"required":false,"default":null}],"line":287,"returns":"Mixed","short":"Reduces the array to a single result.","extra":"If [init] is passed as a starting value, that value will be passed as the first argument to the callback. The second argument will be the first element in the array. From that point, the result of the callback will then be used as the first argument of the next iteration. This is often refered to as \"accumulation\", and [init] is often called an \"accumulator\". If [init] is not passed, then <fn> will be called n - 1 times, where n is the length of the array. In this case, on the first iteration only, the first argument will be the first element of the array, and the second argument will be the second. After that callbacks work as normal, using the result of the previous callback as the first argument of the next. This method is only provided for those browsers that do not support it natively.","examples":[{"multi_line":true,"force_result":true,"html":"   [1,2,3,4].reduce(function(a, b) {\\nreturn a - b;\\n});"},{"multi_line":true,"force_result":true,"html":"   [1,2,3,4].reduce(function(a, b) {\\nreturn a - b;\\n}, 100);"}]},"reduceRight":{"params":[{"name":"fn","type":null,"required":false,"default":null},{"name":"init","type":null,"required":false,"default":null}],"line":307,"returns":"Mixed","short":"Identical to %Array#reduce%, but operates on the elements in reverse order.","extra":"This method is only provided for those browsers that do not support it natively.","examples":[{"multi_line":true,"force_result":true,"html":"   [1,2,3,4].reduceRight(function(a, b) {\\nreturn a - b;\\n});"}]}},"String":{"trim[Side]":{"line":344,"returns":"String","short":"Removes leading and/or trailing whitespace from the string.","extra":"Whitespace is defined as line breaks, tabs, and any character in the \"Space, Separator\" Unicode category, conforming to the the ES5 spec. The standard %trim% method is only added when not fully supported natively.","set":["trim","trimLeft","trimRight"],"examples":[{"html":"'   wasabi   '.trim()"},{"html":"'   wasabi   '.trimLeft()"},{"html":"'   wasabi   '.trimRight()"}]}},"Function":{"bind":{"accepts_unlimited_params":true,"params":[{"name":"scope","type":null,"required":true,"default":null},{"name":"arg1","type":null,"required":false,"default":null}],"line":386,"returns":"Function","short":"Binds <scope> as the %this% object for the function when it is called. Also allows currying an unlimited number of parameters.","extra":"\"currying\" means setting parameters ([arg1], [arg2], etc.) ahead of time so that they are passed when the function is called later. If you pass additional parameters when the function is actually called, they will be added will be added to the end of the curried parameters. This method is provided for browsers that don't support it internally.","examples":[{"multi_line":true,"force_result":true,"html":"   (function() {\\nreturn this;\\n}).bind('woof')();"},{"multi_line":true,"force_result":true,"html":"(function(a) {\\nreturn a;\\n}).bind(1, 2)();"},{"multi_line":true,"force_result":true,"html":"(function(a, b) {\\nreturn a + b;\\n}).bind(1, 2)(3);"}]}},"Date":{"toISOString":{"line":423,"returns":"String","short":"Formats the string to ISO8601 format.","extra":"This will always format as UTC time. Provided for browsers that do not support this method.","examples":[{"html":"Date.create().toISOString()"}]},"toJSON":{"line":432,"returns":"String","short":"Returns a JSON representation of the date.","extra":"This is effectively an alias for %toISOString%. Will always return the date in UTC time. Provided for browsers that do not support this method.","examples":[{"html":"Date.create().toJSON()"}]},"now":{"class_method":true,"line":445,"returns":"String","short":"Returns the number of milliseconds since January 1st, 1970 00:00:00 (UTC time).","extra":"Provided for browsers that do not support this method.","examples":[{"html":"Date.now()"}]}}},"description":"Shim methods that provide ES5 compatible functionality. This package can be excluded if you do not require legacy browser support (IE8 and below)."},"array":{"size":43682,"minified_size":3043,"extra":false,"modules":{"Array":{"create":{"class_method":true,"accepts_unlimited_params":true,"params":[{"name":"obj1","type":null,"required":true,"default":null},{"name":"obj2","type":null,"required":true,"default":null}],"line":407,"returns":"Array","short":"Alternate array constructor.","extra":"This method will create a single array by calling %concat% on all arguments passed. In addition to ensuring that an unknown variable is in a single, flat array (the standard constructor will create nested arrays, this one will not), it is also a useful shorthand to convert a function's arguments object into a standard array.","examples":[{"html":"Array.create('one', true, 3)"},{"html":"Array.create(['one', true, 3])"},{"multi_line":true,"force_result":true,"html":"   Array.create(function(n) {\\nreturn arguments;\\n}('howdy', 'doody'));"}]},"find":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"context","type":null,"required":false,"default":"undefined"}],"line":437,"returns":"Mixed","short":"Returns the first element that matches <f>.","extra":"[context] is the %this% object if passed. When <f> is a function, will use native implementation if it exists. <f> will also match a string, number, array, object, or alternately test against a function or regex. This method implements @array_matching.","examples":[{"multi_line":true,"force_result":true,"html":"   [{a:1,b:2},{a:1,b:3},{a:1,b:4}].find(function(n) {\\nreturn n['a'] == 1;\\n});"},{"force_result":true,"html":"['cuba','japan','canada'].find(/^c/)"}]},"findIndex":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"context","type":null,"required":false,"default":"undefined"}],"line":455,"returns":"Number","short":"Returns the index of the first element that matches <f> or -1 if not found.","extra":"[context] is the %this% object if passed. When <f> is a function, will use native implementation if it exists. <f> will also match a string, number, array, object, or alternately test against a function or regex. This method implements @array_matching.","examples":[{"multi_line":true,"force_result":true,"html":"   [1,2,3,4].findIndex(function(n) {\\nreturn n % 2 == 0;\\n});"},{"multi_line":true,"force_result":true,"html":"   [1,2,3,4].findIndex(3);"},{"multi_line":true,"force_result":true,"html":"   ['one','two','three'].findIndex(/t/);"}]},"findFrom":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"index","type":"number","required":false,"default":"0"},{"name":"loop","type":"boolean","required":false,"default":"false"}],"line":481,"returns":"Array","short":"Returns any element that matches <f>, beginning from [index].","extra":"<f> will match a string, number, array, object, or alternately test against a function or regex. Will continue from index = 0 if [loop] is true. This method implements @array_matching.","examples":[{"html":"['cuba','japan','canada'].findFrom(/^c/, 2)"}]},"findIndexFrom":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"index","type":"number","required":false,"default":"0"},{"name":"loop","type":"boolean","required":false,"default":"false"}],"line":495,"returns":"Array","short":"Returns the index of any element that matches <f>, beginning from [index].","extra":"<f> will match a string, number, array, object, or alternately test against a function or regex. Will continue from index = 0 if [loop] is true. This method implements @array_matching.","examples":[{"html":"['cuba','japan','canada'].findIndexFrom(/^c/, 2)"}]},"findAll":{"params":[{"name":"f","type":null,"required":true,"default":null},{"name":"index","type":"number","required":false,"default":"0"},{"name":"loop","type":"boolean","required":false,"default":"false"}],"line":510,"returns":"Array","short":"Returns all elements that match <f>.","extra":"<f> will match a string, number, array, object, or alternately test against a function or regex. Starts at [index], and will continue once from index = 0 if [loop] is true. This method implements @array_matching.","examples":[{"multi_line":true,"force_result":true,"html":"   [{a:1,b:2},{a:1,b:3},{a:2,b:4}].findAll(function(n) {\\nreturn n['a'] == 1;\\n});"},{"force_result":true,"html":"['cuba','japan','canada'].findAll(/^c/)"},{"force_result":true,"html":"['cuba','japan','canada'].findAll(/^c/, 2)"}]},"count":{"params":[{"name":"f","type":null,"required":true,"default":null}],"line":537,"returns":"Number","short":"Counts all elements in the array that match <f>.","extra":"<f> will match a string, number, array, object, or alternately test against a function or regex. This method implements @array_matching.","examples":[{"html":"[1,2,3,1].count(1)"},{"html":"['a','b','c'].count(/b/)"},{"multi_line":true,"force_result":true,"html":"   [{a:1},{b:2}].count(function(n) {\\nreturn n['a'] > 1;\\n});"}]},"removeAt":{"params":[{"name":"start","type":null,"required":true,"default":null},{"name":"end","type":null,"required":false,"default":null}],"line":556,"returns":"Array","short":"Removes element at <start>. If [end] is specified, removes the range between <start> and [end]. This method will change the array! If you don't intend the array to be changed use %clone% first.","examples":[{"html":"['a','b','c'].removeAt(0)"},{"html":"[1,2,3,4].removeAt(1, 3)"}]},"include":{"params":[{"name":"el","type":null,"required":true,"default":null},{"name":"index","type":null,"required":false,"default":null}],"line":573,"returns":"Array","short":"Adds <el> to the array.","extra":"This is a non-destructive alias for %add%. It will not change the original array.","examples":[{"html":"[1,2,3,4].include(5)"},{"html":"[1,2,3,4].include(8, 1)"},{"html":"[1,2,3,4].include([5,6,7])"}]},"exclude":{"accepts_unlimited_params":true,"params":[{"name":"f1","type":null,"required":false,"default":null},{"name":"f2","type":null,"required":false,"default":null}],"line":589,"returns":"Array","short":"Removes any element in the array that matches [f1], [f2], etc.","extra":"This is a non-destructive alias for %remove%. It will not change the original array. This method implements @array_matching.","examples":[{"html":"[1,2,3].exclude(3)"},{"html":"['a','b','c'].exclude(/b/)"},{"multi_line":true,"force_result":true,"html":"   [{a:1},{b:2}].exclude(function(n) {\\nreturn n['a'] == 1;\\n});"}]},"clone":{"line":607,"returns":"Array","short":"Makes a shallow clone of the array.","examples":[{"html":"[1,2,3].clone()"}]},"unique":{"params":[{"name":"map","type":"null","required":false,"default":"null"}],"line":620,"returns":"Array","short":"Removes all duplicate elements in the array.","extra":"[map] may be a function mapping the value to be uniqued on or a string acting as a shortcut. This is most commonly used when you have a key that ensures the object's uniqueness, and don't need to check all fields. This method will also correctly operate on arrays of objects.","examples":[{"html":"[1,2,2,3].unique()"},{"html":"[{foo:'bar'},{foo:'bar'}].unique()"},{"multi_line":true,"force_result":true,"html":"   [{foo:'bar'},{foo:'bar'}].unique(function(obj){\\nreturn obj.foo;\\n});"},{"force_result":true,"html":"[{foo:'bar'},{foo:'bar'}].unique('foo')"}]},"flatten":{"params":[{"name":"limit","type":null,"required":false,"default":"Infinity"}],"line":639,"returns":"Array","short":"Returns a flattened, one-dimensional copy of the array.","extra":"You can optionally specify a [limit], which will only flatten that depth.","examples":[{"html":"[[1], 2, [3]].flatten()"},{"html":"[['a'],[],'b','c'].flatten()"}]},"union":{"accepts_unlimited_params":true,"params":[{"name":"a1","type":null,"required":false,"default":null},{"name":"a2","type":null,"required":false,"default":null}],"line":654,"returns":"Array","short":"Returns an array containing all elements in all arrays with duplicates removed.","extra":"This method will also correctly operate on arrays of objects.","examples":[{"html":"[1,3,5].union([5,7,9])"},{"html":"['a','b'].union(['b','c'])"}]},"intersect":{"accepts_unlimited_params":true,"params":[{"name":"a1","type":null,"required":false,"default":null},{"name":"a2","type":null,"required":false,"default":null}],"line":669,"returns":"Array","short":"Returns an array containing the elements all arrays have in common.","extra":"This method will also correctly operate on arrays of objects.","examples":[{"html":"[1,3,5].intersect([5,7,9])"},{"html":"['a','b'].intersect('b','c')"}]},"subtract":{"accepts_unlimited_params":true,"params":[{"name":"a1","type":null,"required":false,"default":null},{"name":"a2","type":null,"required":false,"default":null}],"line":684,"returns":"Array","short":"Subtracts from the array all elements in [a1], [a2], etc.","extra":"This method will also correctly operate on arrays of objects.","examples":[{"html":"[1,3,5].subtract([5,7,9])"},{"html":"[1,3,5].subtract([3],[5])"},{"html":"['a','b'].subtract('b','c')"}]},"at":{"params":[{"name":"index","type":null,"required":true,"default":null},{"name":"loop","type":"boolean","required":false,"default":"true"}],"line":700,"returns":"Mixed","short":"Gets the element(s) at a given index.","extra":"When [loop] is true, overshooting the end of the array (or the beginning) will begin counting from the other end. As an alternate syntax, passing multiple indexes will get the elements at those indexes.","examples":[{"html":"[1,2,3].at(0)"},{"html":"[1,2,3].at(2)"},{"html":"[1,2,3].at(4)"},{"html":"[1,2,3].at(4, false)"},{"html":"[1,2,3].at(-1)"},{"html":"[1,2,3].at(0,1)"}]},"first":{"params":[{"name":"num","type":"number","required":false,"default":"1"}],"line":719,"returns":"Mixed","short":"Returns the first element(s) in the array.","extra":"When <num> is passed, returns the first <num> elements in the array.","examples":[{"html":"[1,2,3].first()"},{"html":"[1,2,3].first(2)"}]},"last":{"params":[{"name":"num","type":"number","required":false,"default":"1"}],"line":736,"returns":"Mixed","short":"Returns the last element(s) in the array.","extra":"When <num> is passed, returns the last <num> elements in the array.","examples":[{"html":"[1,2,3].last()"},{"html":"[1,2,3].last(2)"}]},"from":{"params":[{"name":"index","type":null,"required":true,"default":null}],"line":753,"returns":"Array","short":"Returns a slice of the array from <index>.","examples":[{"html":"[1,2,3].from(1)"},{"html":"[1,2,3].from(2)"}]},"to":{"params":[{"name":"index","type":null,"required":true,"default":null}],"line":767,"returns":"Array","short":"Returns a slice of the array up to <index>.","examples":[{"html":"[1,2,3].to(1)"},{"html":"[1,2,3].to(2)"}]},"min":{"params":[{"name":"map","type":null,"required":false,"default":null},{"name":"all","type":"boolean","required":false,"default":"false"}],"line":782,"returns":"Mixed","short":"Returns the element in the array with the lowest value.","extra":"[map] may be a function mapping the value to be checked or a string acting as a shortcut. If [all] is true, will return all min values in an array.","examples":[{"html":"[1,2,3].min()"},{"html":"['fee','fo','fum'].min('length')"},{"html":"['fee','fo','fum'].min('length', true)"},{"multi_line":true,"force_result":true,"html":"   ['fee','fo','fum'].min(function(n) {\\nreturn n.length;\\n});"},{"multi_line":true,"force_result":true,"html":"   [{a:3,a:2}].min(function(n) {\\nreturn n['a'];\\n});"}]},"max":{"params":[{"name":"map","type":null,"required":false,"default":null},{"name":"all","type":"boolean","required":false,"default":"false"}],"line":804,"returns":"Mixed","short":"Returns the element in the array with the greatest value.","extra":"[map] may be a function mapping the value to be checked or a string acting as a shortcut. If [all] is true, will return all max values in an array.","examples":[{"html":"[1,2,3].max()"},{"html":"['fee','fo','fum'].max('length')"},{"html":"['fee','fo','fum'].max('length', true)"},{"multi_line":true,"force_result":true,"html":"   [{a:3,a:2}].max(function(n) {\\nreturn n['a'];\\n});"}]},"least":{"params":[{"name":"map","type":null,"required":false,"default":null}],"line":823,"returns":"Array","short":"Returns the elements in the array with the least commonly occuring value.","extra":"[map] may be a function mapping the value to be checked or a string acting as a shortcut.","examples":[{"html":"[3,2,2].least()"},{"html":"['fe','fo','fum'].least('length')"},{"multi_line":true,"force_result":true,"html":"   [{age:35,name:'ken'},{age:12,name:'bob'},{age:12,name:'ted'}].least(function(n) {\\nreturn n.age;\\n});"}]},"most":{"params":[{"name":"map","type":null,"required":false,"default":null}],"line":841,"returns":"Array","short":"Returns the elements in the array with the most commonly occuring value.","extra":"[map] may be a function mapping the value to be checked or a string acting as a shortcut.","examples":[{"html":"[3,2,2].most()"},{"html":"['fe','fo','fum'].most('length')"},{"multi_line":true,"force_result":true,"html":"   [{age:35,name:'ken'},{age:12,name:'bob'},{age:12,name:'ted'}].most(function(n) {\\nreturn n.age;\\n});"}]},"sum":{"params":[{"name":"map","type":null,"required":false,"default":null}],"line":859,"returns":"Number","short":"Sums all values in the array.","extra":"[map] may be a function mapping the value to be summed or a string acting as a shortcut.","examples":[{"html":"[1,2,2].sum()"},{"multi_line":true,"force_result":true,"html":"   [{age:35},{age:12},{age:12}].sum(function(n) {\\nreturn n.age;\\n});"},{"force_result":true,"html":"[{age:35},{age:12},{age:12}].sum('age')"}]},"average":{"params":[{"name":"map","type":null,"required":false,"default":null}],"line":878,"returns":"Number","short":"Gets the mean average for all values in the array.","extra":"[map] may be a function mapping the value to be averaged or a string acting as a shortcut.","examples":[{"html":"[1,2,3].average()"},{"multi_line":true,"force_result":true,"html":"   [{age:35},{age:11},{age:11}].average(function(n) {\\nreturn n.age;\\n});"},{"force_result":true,"html":"[{age:35},{age:11},{age:11}].average('age')"}]},"inGroups":{"params":[{"name":"num","type":null,"required":true,"default":null},{"name":"padding","type":null,"required":false,"default":null}],"line":897,"returns":"Array","short":"Groups the array into <num> arrays.","extra":"[padding] specifies a value with which to pad the last array so that they are all equal length.","examples":[{"html":"[1,2,3,4,5,6,7].inGroups(3)"},{"html":"[1,2,3,4,5,6,7].inGroups(3, 'none')"}]},"inGroupsOf":{"params":[{"name":"num","type":null,"required":true,"default":null},{"name":"padding","type":"null","required":false,"default":"null"}],"line":926,"returns":"Array","short":"Groups the array into arrays of <num> elements each.","extra":"[padding] specifies a value with which to pad the last array so that they are all equal length.","examples":[{"html":"[1,2,3,4,5,6,7].inGroupsOf(4)"},{"html":"[1,2,3,4,5,6,7].inGroupsOf(4, 'none')"}]},"isEmpty":{"line":952,"returns":"Boolean","short":"Returns true if the array is empty.","extra":"This is true if the array has a length of zero, or contains only %undefined%, %null%, or %NaN%.","examples":[{"html":"[].isEmpty()"},{"html":"[null,undefined].isEmpty()"}]},"sortBy":{"params":[{"name":"map","type":null,"required":true,"default":null},{"name":"desc","type":"boolean","required":false,"default":"false"}],"line":967,"returns":"Array","short":"Sorts the array by <map>.","extra":"<map> may be a function, a string acting as a shortcut, or blank (direct comparison of array values). [desc] will sort the array in descending order. When the field being sorted on is a string, the resulting order will be determined by an internal collation algorithm that is optimized for major Western languages, but can be customized. For more information see @array_sorting.","examples":[{"html":"['world','a','new'].sortBy('length')"},{"html":"['world','a','new'].sortBy('length', true)"},{"multi_line":true,"force_result":true,"html":"   [{age:72},{age:13},{age:18}].sortBy(function(n) {\\nreturn n.age;\\n});"}]},"randomize":{"line":1001,"returns":"Array","short":"Returns a copy of the array with the elements randomized.","extra":"Uses Fisher-Yates algorithm.","examples":[{"html":"[1,2,3,4].randomize()"}]},"zip":{"accepts_unlimited_params":true,"params":[{"name":"arr1","type":null,"required":false,"default":null},{"name":"arr2","type":null,"required":false,"default":null}],"line":1022,"returns":"Array","short":"Merges multiple arrays together.","extra":"This method \"zips up\" smaller arrays into one large whose elements are \"all elements at index 0\", \"all elements at index 1\", etc. Useful when you have associated data that is split over separated arrays. If the arrays passed have more elements than the original array, they will be discarded. If they have fewer elements, the missing elements will filled with %null%.","examples":[{"html":"[1,2,3].zip([4,5,6])"},{"html":"['Martin','John'].zip(['Luther','F.'], ['King','Kennedy'])"}]},"sample":{"params":[{"name":"num","type":null,"required":false,"default":null}],"line":1042,"returns":"Mixed","short":"Returns a random element from the array.","extra":"If [num] is passed, will return [num] samples from the array.","examples":[{"html":"[1,2,3,4,5].sample()"},{"html":"[1,2,3,4,5].sample(3)"}]},"each":{"params":[{"name":"fn","type":null,"required":true,"default":null},{"name":"index","type":"number","required":false,"default":"0"},{"name":"loop","type":"boolean","required":false,"default":"false"}],"line":1058,"returns":"Array","short":"Runs <fn> against each element in the array. Enhanced version of %Array#forEach%.","extra":"Parameters passed to <fn> are identical to %forEach%, ie. the first parameter is the current element, second parameter is the current index, and third parameter is the array itself. If <fn> returns %false% at any time it will break out of the loop. Once %each% finishes, it will return the array. If [index] is passed, <fn> will begin at that index and work its way to the end. If [loop] is true, it will then start over from the beginning of the array and continue until it reaches [index] - 1.","examples":[{"multi_line":true,"html":"[1,2,3,4].each(function(n) {\\n// Called 4 times: 1, 2, 3, 4\\n});"},{"multi_line":true,"html":"[1,2,3,4].each(function(n) {\\n// Called 4 times: 3, 4, 1, 2\\n}, 2, true);"}]},"add":{"params":[{"name":"el","type":null,"required":true,"default":null},{"name":"index","type":null,"required":false,"default":null}],"line":1078,"returns":"Array","short":"Adds <el> to the array.","extra":"If [index] is specified, it will add at [index], otherwise adds to the end of the array. %add% behaves like %concat% in that if <el> is an array it will be joined, not inserted. This method will change the array! Use %include% for a non-destructive alias. Also, %insert% is provided as an alias that reads better when using an index.","examples":[{"html":"[1,2,3,4].add(5)"},{"html":"[1,2,3,4].add([5,6,7])"},{"html":"[1,2,3,4].insert(8, 1)"}]},"remove":{"accepts_unlimited_params":true,"params":[{"name":"f1","type":null,"required":false,"default":null},{"name":"f2","type":null,"required":false,"default":null}],"line":1096,"returns":"Array","short":"Removes any element in the array that matches [f1], [f2], etc.","extra":"Will match a string, number, array, object, or alternately test against a function or regex. This method will change the array! Use %exclude% for a non-destructive alias. This method implements @array_matching.","examples":[{"html":"[1,2,3].remove(3)"},{"html":"['a','b','c'].remove(/b/)"},{"multi_line":true,"force_result":true,"html":"   [{a:1},{b:2}].remove(function(n) {\\nreturn n['a'] == 1;\\n});"}]},"compact":{"params":[{"name":"all","type":"boolean","required":false,"default":"false"}],"line":1125,"returns":"Array","short":"Removes all instances of %undefined%, %null%, and %NaN% from the array.","extra":"If [all] is %true%, all \"falsy\" elements will be removed. This includes empty strings, 0, and false.","examples":[{"html":"[1,null,2,undefined,3].compact()"},{"html":"[1,'',2,false,3].compact()"},{"html":"[1,'',2,false,3].compact(true)"}]},"groupBy":{"params":[{"name":"map","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":false,"default":null}],"line":1151,"returns":"Object","short":"Groups the array by <map>.","extra":"Will return an object with keys equal to the grouped values. <map> may be a mapping function, or a string acting as a shortcut. Optionally calls [fn] for each group.","examples":[{"html":"['fee','fi','fum'].groupBy('length')"},{"multi_line":true,"force_result":true,"html":"   [{age:35,name:'ken'},{age:15,name:'bob'}].groupBy(function(n) {\\nreturn n.age;\\n});"}]},"none":{"params":[{"name":"f","type":null,"required":true,"default":null}],"line":1177,"returns":"Boolean","short":"Returns true if none of the elements in the array match <f>.","extra":"<f> will match a string, number, array, object, or alternately test against a function or regex. This method implements @array_matching.","examples":[{"html":"[1,2,3].none(5)"},{"html":"['a','b','c'].none(/b/)"},{"multi_line":true,"force_result":true,"html":"   [{a:1},{b:2}].none(function(n) {\\nreturn n['a'] > 1;\\n});"}]},"all":{"line":1203,"alias":"every","short":"Alias for %every%."},"any":{"line":1210,"alias":"some","short":"Alias for %some%."},"insert":{"line":1216,"alias":"add","short":"Alias for %add%."}},"Object":{"[enumerable]":{"params":[{"name":"obj","type":null,"required":true,"default":null}],"line":1236,"returns":"Boolean","short":"Enumerable methods in the Array package are also available to the Object class. They will perform their normal operations for every property in <obj>.","extra":"In cases where a callback is used, instead of %element, index%, the callback will instead be passed %key, value%. Enumerable methods are also available to extended objects as instance methods.","set":["each","map","any","all","none","count","find","findAll","reduce","isEmpty","sum","average","min","max","least","most"],"examples":[{"html":"Object.any({foo:'bar'}, 'bar')"},{"html":"Object.extended({foo:'bar'}).any('bar')"},{"html":"Object.isEmpty({})"},{"multi_line":true,"force_result":true,"html":"   Object.map({ fred: { age: 52 \\n} \\n}, 'age');"}]},"size":{"params":[{"name":"obj","type":null,"required":true,"default":null}],"line":1327,"returns":"Number","short":"Returns the number of properties in <obj>.","extra":"%size% is available as an instance method on extended objects.","examples":[{"html":"Object.size({ foo: 'bar' })"}]}}},"dependency":"core","description":"Array manipulation and traversal, \"fuzzy matching\" against elements, alphanumeric sorting and collation, enumerable methods on Object."},"object":{"size":17816,"minified_size":1106,"extra":false,"modules":{"Object":{"is[Type]":{"class_method":true,"params":[{"name":"obj","type":null,"required":true,"default":null}],"line":94,"returns":"Boolean","short":"Returns true if <obj> is an object of that type.","extra":"%isObject% will return false on anything that is not an object literal, including instances of inherited classes. Note also that %isNaN% will ONLY return true if the object IS %NaN%. It does not mean the same as browser native %isNaN%, which returns true for anything that is \"not a number\".","set":["isArray","isObject","isBoolean","isDate","isFunction","isNaN","isNumber","isString","isRegExp"],"examples":[{"html":"Object.isArray([1,2,3])"},{"html":"Object.isDate(3)"},{"html":"Object.isRegExp(/wasabi/)"},{"html":"Object.isObject({ broken:'wear' })"}]},"watch":{"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"prop","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":true,"default":null}],"line":140,"returns":"Nothing","short":"Watches a property of <obj> and runs <fn> when it changes.","extra":"<fn> is passed three arguments: the property <prop>, the old value, and the new value. The return value of [fn] will be set as the new value. This method is useful for things such as validating or cleaning the value when it is set. Warning: this method WILL NOT work in browsers that don't support %Object.defineProperty% (IE 8 and below). This is the only method in Sugar that is not fully compatible with all browsers. %watch% is available as an instance method on extended objects.","examples":[{"multi_line":true,"html":"Object.watch({ foo: 'bar' }, 'foo', function(prop, oldVal, newVal) {\\n// Will be run when the property 'foo' is set on the object.\\n});"},{"multi_line":true,"html":"Object.extended().watch({ foo: 'bar' }, 'foo', function(prop, oldVal, newVal) {\\n// Will be run when the property 'foo' is set on the object.\\n});"}]},"keys":{"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":false,"default":null}],"line":173,"returns":"Array","short":"Returns an array containing the keys in <obj>. Optionally calls [fn] for each key.","extra":"This method is provided for browsers that don't support it natively, and additionally is enhanced to accept the callback [fn]. Returned keys are in no particular order. %keys% is available as an instance method on extended objects.","examples":[{"html":"Object.keys({ broken: 'wear' })"},{"multi_line":true,"html":"Object.keys({ broken: 'wear' }, function(key, value) {\\n// Called once for each key.\\n});"},{"html":"Object.extended({ broken: 'wear' }).keys()"}]},"equal":{"params":[{"name":"a","type":null,"required":true,"default":null},{"name":"b","type":null,"required":true,"default":null}],"line":208,"returns":"Boolean","short":"Returns true if <a> and <b> are equal.","extra":"%equal% in Sugar is \"egal\", meaning the values are equal if they are \"not observably distinguishable\". Note that on extended objects the name is %equals% for readability.","examples":[{"html":"Object.equal({a:2}, {a:2})"},{"html":"Object.equal({a:2}, {a:3})"},{"html":"Object.extended({a:2}).equals({a:3})"}]},"extended":{"class_method":true,"params":[{"name":"obj","type":"object","required":true,"default":"{}"}],"line":224,"returns":"Extended object","short":"Creates a new object, equivalent to %new Object()% or %{}%, but with extended methods.","extra":"See extended objects for more.","examples":[{"html":"Object.extended()"},{"html":"Object.extended({ happy:true, pappy:false }).keys()"},{"html":"Object.extended({ happy:true, pappy:false }).values()"}]},"merge":{"params":[{"name":"target","type":null,"required":true,"default":null},{"name":"source","type":null,"required":true,"default":null},{"name":"deep","type":"boolean","required":false,"default":"false"},{"name":"resolve","type":"boolean","required":false,"default":"true"}],"line":240,"returns":"Merged object","short":"Merges all the properties of <source> into <target>.","extra":"Merges are shallow unless [deep] is %true%. Properties of <source> will win in the case of conflicts, unless [resolve] is %false%. [resolve] can also be a function that resolves the conflict. In this case it will be passed 3 arguments, %key%, %targetVal%, and %sourceVal%, with the context set to <source>. This will allow you to solve conflict any way you want, ie. adding two numbers together, etc. %merge% is available as an instance method on extended objects.","examples":[{"html":"Object.merge({a:1},{b:2})"},{"html":"Object.merge({a:1},{a:2}, false, false)"},{"multi_line":true,"force_result":true,"html":"   Object.merge({a:1},{a:2}, false, function(key, a, b) {\\nreturn a + b;\\n});"},{"force_result":true,"html":"Object.extended({a:1}).merge({b:2})"}]},"values":{"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":false,"default":null}],"line":294,"returns":"Array","short":"Returns an array containing the values in <obj>. Optionally calls [fn] for each value.","extra":"Returned values are in no particular order. %values% is available as an instance method on extended objects.","examples":[{"html":"Object.values({ broken: 'wear' })"},{"multi_line":true,"html":"Object.values({ broken: 'wear' }, function(value) {\\n// Called once for each value.\\n});"},{"html":"Object.extended({ broken: 'wear' }).values()"}]},"clone":{"params":[{"name":"obj","type":"object","required":true,"default":"{}"},{"name":"deep","type":"boolean","required":false,"default":"false"}],"line":317,"returns":"Cloned object","short":"Creates a clone (copy) of <obj>.","extra":"Default is a shallow clone, unless [deep] is true. %clone% is available as an instance method on extended objects.","examples":[{"html":"Object.clone({foo:'bar'})"},{"html":"Object.clone()"},{"html":"Object.extended({foo:'bar'}).clone()"}]},"fromQueryString":{"class_method":true,"params":[{"name":"str","type":null,"required":true,"default":null},{"name":"booleans","type":"boolean","required":false,"default":"false"}],"line":352,"returns":"Object","short":"Converts the query string of a URL into an object.","extra":"If [booleans] is true, then %\"true\"% and %\"false\"% will be cast into booleans. All other values, including numbers will remain their string values.","examples":[{"html":"Object.fromQueryString('foo=bar&broken=wear')"},{"html":"Object.fromQueryString('foo[]=1&foo[]=2')"},{"html":"Object.fromQueryString('foo=true', true)"}]},"toQueryString":{"class_method":true,"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"namespace","type":"null","required":false,"default":"null"}],"line":375,"returns":"Object","short":"Converts the object into a query string.","extra":"Accepts deep nested objects and arrays. If [namespace] is passed, it will be prefixed to all param names.","examples":[{"html":"Object.toQueryString({foo:'bar'})"},{"html":"Object.toQueryString({foo:['a','b','c']})"},{"html":"Object.toQueryString({name:'Bob'}, 'user')"}]},"tap":{"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":true,"default":null}],"line":391,"returns":"Object","short":"Runs <fn> and returns <obj>.","extra":" A string can also be used as a shortcut to a method. This method is used to run an intermediary function in the middle of method chaining. As a standalone method on the Object class it doesn't have too much use. The power of %tap% comes when using extended objects or modifying the Object prototype with Object.extend().","examples":[{"multi_line":true,"html":"Object.extend();"},{"multi_line":true,"html":"[2,4,6].map(Math.exp).tap(function(arr) {\\narr.pop()\\n});"},{"multi_line":true,"html":"[2,4,6].map(Math.exp).tap('pop').map(Math.round);"}]},"has":{"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"key","type":null,"required":true,"default":null}],"line":416,"returns":"Boolean","short":"Checks if <obj> has <key> using hasOwnProperty from Object.prototype.","extra":"This method is considered safer than %Object#hasOwnProperty% when using objects as hashes. See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/ for more.","examples":[{"html":"Object.has({ foo: 'bar' }, 'foo')"},{"html":"Object.has({ foo: 'bar' }, 'baz')"},{"html":"Object.has({ hasOwnProperty: true }, 'foo')"}]},"select":{"accepts_unlimited_params":true,"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"find","type":null,"required":true,"default":null}],"line":432,"returns":"Object","short":"Builds a new object containing the values specified in <find>.","extra":"When <find> is a string, that single key will be selected. It can also be a regex, selecting any key that matches, or an object which will match if the key also exists in that object, effectively doing an \"intersect\" operation on that object. Multiple selections may also be passed as an array or directly as enumerated arguments. %select% is available as an instance method on extended objects.","examples":[{"html":"Object.select({a:1,b:2}, 'a')"},{"html":"Object.select({a:1,b:2}, /[a-z]/)"},{"html":"Object.select({a:1,b:2}, {a:1})"},{"html":"Object.select({a:1,b:2}, 'a', 'b')"},{"html":"Object.select({a:1,b:2}, ['a', 'b'])"}]},"reject":{"accepts_unlimited_params":true,"params":[{"name":"obj","type":null,"required":true,"default":null},{"name":"find","type":null,"required":true,"default":null}],"line":450,"returns":"Object","short":"Builds a new object containing all values except those specified in <find>.","extra":"When <find> is a string, that single key will be rejected. It can also be a regex, rejecting any key that matches, or an object which will match if the key also exists in that object, effectively \"subtracting\" that object. Multiple selections may also be passed as an array or directly as enumerated arguments. %reject% is available as an instance method on extended objects.","examples":[{"html":"Object.reject({a:1,b:2}, 'a')"},{"html":"Object.reject({a:1,b:2}, /[a-z]/)"},{"html":"Object.reject({a:1,b:2}, {a:1})"},{"html":"Object.reject({a:1,b:2}, 'a', 'b')"},{"html":"Object.reject({a:1,b:2}, ['a', 'b'])"}]}}},"dependency":"core","description":"Object manipulation, type checking (isNumber, isString, ...), extended objects with hash-like methods available as instance methods."},"date":{"size":83470,"minified_size":7304,"extra":false,"modules":{"Date":{"[units]Since":{"params":[{"name":"d","type":null,"required":false,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":1194,"returns":"Number","short":"Returns the time since [d] in the appropriate unit.","extra":"[d] will accept a date object, timestamp, or text format. If not specified, [d] is assumed to be now. [locale] can be passed to specify the locale that the date is in. %[unit]Ago% is provided as an alias to make this more readable when [d] is assumed to be the current date. For more see @date_format.","set":["millisecondsSince","secondsSince","minutesSince","hoursSince","daysSince","weeksSince","monthsSince","yearsSince"],"examples":[{"html":"Date.create().millisecondsSince('1 hour ago')"},{"html":"Date.create().daysSince('1 week ago')"},{"html":"Date.create().yearsSince('15 years ago')"},{"html":"Date.create('15 years ago').yearsAgo()"}]},"[units]Ago":{"line":1217,"returns":"Number","short":"Returns the time ago in the appropriate unit.","set":["millisecondsAgo","secondsAgo","minutesAgo","hoursAgo","daysAgo","weeksAgo","monthsAgo","yearsAgo"],"examples":[{"html":"Date.create('last year').millisecondsAgo()"},{"html":"Date.create('last year').daysAgo()"},{"html":"Date.create('last year').yearsAgo()"}]},"[units]Until":{"params":[{"name":"d","type":null,"required":false,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":1238,"returns":"Number","short":"Returns the time until [d] in the appropriate unit.","extra":"[d] will accept a date object, timestamp, or text format. If not specified, [d] is assumed to be now. [locale] can be passed to specify the locale that the date is in. %[unit]FromNow% is provided as an alias to make this more readable when [d] is assumed to be the current date. For more see @date_format.","set":["millisecondsUntil","secondsUntil","minutesUntil","hoursUntil","daysUntil","weeksUntil","monthsUntil","yearsUntil"],"examples":[{"html":"Date.create().millisecondsUntil('1 hour from now')"},{"html":"Date.create().daysUntil('1 week from now')"},{"html":"Date.create().yearsUntil('15 years from now')"},{"html":"Date.create('15 years from now').yearsFromNow()"}]},"[units]FromNow":{"line":1261,"returns":"Number","short":"Returns the time from now in the appropriate unit.","set":["millisecondsFromNow","secondsFromNow","minutesFromNow","hoursFromNow","daysFromNow","weeksFromNow","monthsFromNow","yearsFromNow"],"examples":[{"html":"Date.create('next year').millisecondsFromNow()"},{"html":"Date.create('next year').daysFromNow()"},{"html":"Date.create('next year').yearsFromNow()"}]},"add[Units]":{"params":[{"name":"num","type":null,"required":true,"default":null},{"name":"reset","type":"boolean","required":false,"default":"false"}],"line":1282,"returns":"Date","short":"Adds <num> of the unit to the date. If [reset] is true, all lower units will be reset.","extra":"Note that \"months\" is ambiguous as a unit of time. If the target date falls on a day that does not exist (ie. August 31 -> February 31), the date will be shifted to the last day of the month. Don't use %addMonths% if you need precision.","set":["addMilliseconds","addSeconds","addMinutes","addHours","addDays","addWeeks","addMonths","addYears"],"examples":[{"html":"Date.create().addMilliseconds(5)"},{"html":"Date.create().addDays(5)"},{"html":"Date.create().addYears(5)"}]},"isLast[Unit]":{"line":1304,"returns":"Boolean","short":"Returns true if the date is last week/month/year.","set":["isLastWeek","isLastMonth","isLastYear"],"examples":[{"html":"Date.create('yesterday').isLastWeek()"},{"html":"Date.create('yesterday').isLastMonth()"},{"html":"Date.create('yesterday').isLastYear()"}]},"isThis[Unit]":{"line":1320,"returns":"Boolean","short":"Returns true if the date is this week/month/year.","set":["isThisWeek","isThisMonth","isThisYear"],"examples":[{"html":"Date.create('tomorrow').isThisWeek()"},{"html":"Date.create('tomorrow').isThisMonth()"},{"html":"Date.create('tomorrow').isThisYear()"}]},"isNext[Unit]":{"line":1336,"returns":"Boolean","short":"Returns true if the date is next week/month/year.","set":["isNextWeek","isNextMonth","isNextYear"],"examples":[{"html":"Date.create('tomorrow').isNextWeek()"},{"html":"Date.create('tomorrow').isNextMonth()"},{"html":"Date.create('tomorrow').isNextYear()"}]},"beginningOf[Unit]":{"line":1352,"returns":"Date","short":"Sets the date to the beginning of the appropriate unit.","set":["beginningOfDay","beginningOfWeek","beginningOfMonth","beginningOfYear"],"examples":[{"html":"Date.create().beginningOfDay()"},{"html":"Date.create().beginningOfWeek()"},{"html":"Date.create().beginningOfMonth()"},{"html":"Date.create().beginningOfYear()"}]},"endOf[Unit]":{"line":1370,"returns":"Date","short":"Sets the date to the end of the appropriate unit.","set":["endOfDay","endOfWeek","endOfMonth","endOfYear"],"examples":[{"html":"Date.create().endOfDay()"},{"html":"Date.create().endOfWeek()"},{"html":"Date.create().endOfMonth()"},{"html":"Date.create().endOfYear()"}]},"is[Day]":{"line":1553,"returns":"Boolean","short":"Returns true if the date falls on that day.","extra":"Also available: %isYesterday%, %isToday%, %isTomorrow%, %isWeekday%, and %isWeekend%.","set":["isToday","isYesterday","isTomorrow","isWeekday","isWeekend","isSunday","isMonday","isTuesday","isWednesday","isThursday","isFriday","isSaturday"],"examples":[{"html":"Date.create('tomorrow').isToday()"},{"html":"Date.create('thursday').isTomorrow()"},{"html":"Date.create('yesterday').isWednesday()"},{"html":"Date.create('today').isWeekend()"}]},"isFuture":{"line":1580,"returns":"Boolean","short":"Returns true if the date is in the future.","examples":[{"html":"Date.create('next week').isFuture()"},{"html":"Date.create('last week').isFuture()"}]},"isPast":{"line":1589,"returns":"Boolean","short":"Returns true if the date is in the past.","examples":[{"html":"Date.create('last week').isPast()"},{"html":"Date.create('next week').isPast()"}]},"create":{"class_method":true,"params":[{"name":"d","type":null,"required":true,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":1642,"returns":"Date","short":"Alternate Date constructor which understands many different text formats, a timestamp, or another date.","extra":"If no argument is given, date is assumed to be now. %Date.create% additionally can accept enumerated parameters as with the standard date constructor. [locale] can be passed to specify the locale that the date is in. When unspecified, the current locale (default is English) is assumed. UTC-based dates can be created through the %utc% object. For more see @date_format.","set":["Date.utc.create"],"examples":[{"html":"Date.create('July')"},{"html":"Date.create('1776')"},{"html":"Date.create('today')"},{"html":"Date.create('wednesday')"},{"html":"Date.create('next friday')"},{"html":"Date.create('July 4, 1776')"},{"html":"Date.create(-446806800000)"},{"html":"Date.create(1776, 6, 4)"},{"html":"Date.create('1776年07月04日', 'ja')"},{"html":"Date.utc.create('July 4, 1776', 'en')"}]},"past":{"class_method":true,"params":[{"name":"d","type":null,"required":true,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":1668,"returns":"Date","short":"Alternate form of %Date.create% with any ambiguity assumed to be the past.","extra":"For example %\"Sunday\"% can be either \"the Sunday coming up\" or \"the Sunday last\" depending on context. Note that dates explicitly in the future (\"next Sunday\") will remain in the future. This method simply provides a hint when ambiguity exists. UTC-based dates can be created through the %utc% object. For more, see @date_format.","set":["Date.utc.past"],"examples":[{"html":"Date.past('July')"},{"html":"Date.past('Wednesday')"}]},"future":{"class_method":true,"params":[{"name":"d","type":null,"required":true,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":1686,"returns":"Date","short":"Alternate form of %Date.create% with any ambiguity assumed to be the future.","extra":"For example %\"Sunday\"% can be either \"the Sunday coming up\" or \"the Sunday last\" depending on context. Note that dates explicitly in the past (\"last Sunday\") will remain in the past. This method simply provides a hint when ambiguity exists. UTC-based dates can be created through the %utc% object. For more, see @date_format.","set":["Date.utc.future"],"examples":[{"html":"Date.future('July')"},{"html":"Date.future('Wednesday')"}]},"addLocale":{"class_method":true,"params":[{"name":"code","type":null,"required":true,"default":null},{"name":"set","type":null,"required":true,"default":null}],"line":1704,"returns":"Locale","short":"Adds a locale <set> to the locales understood by Sugar.","extra":"For more see @date_format."},"setLocale":{"class_method":true,"params":[{"name":"code","type":null,"required":true,"default":null}],"line":1715,"returns":"Locale","short":"Sets the current locale to be used with dates.","extra":"Sugar has support for 13 locales that are available through the \"Date Locales\" package. In addition you can define a new locale with %Date.addLocale%. For more see @date_format."},"getLocale":{"class_method":true,"params":[{"name":"code","type":null,"required":false,"default":"current"}],"line":1733,"returns":"Locale","short":"Gets the locale for the given code, or the current locale.","extra":"The resulting locale object can be manipulated to provide more control over date localizations. For more about locales, see @date_format."},"set":{"params":[{"name":"set","type":null,"required":true,"default":null},{"name":"reset","type":"boolean","required":false,"default":"false"}],"line":1759,"returns":"Date","short":"Sets the date object.","extra":"This method can accept multiple formats including a single number as a timestamp, an object, or enumerated parameters (as with the Date constructor). If [reset] is %true%, any units more specific than those passed will be reset.","examples":[{"html":"new Date().set({ year: 2011, month: 11, day: 31 })"},{"html":"new Date().set(2011, 11, 31)"},{"html":"new Date().set(86400000)"},{"html":"new Date().set({ year: 2004, month: 6 }, true)"}]},"setWeekday":{"line":1778,"returns":"Nothing","short":"Sets the weekday of the date.","extra":"In order to maintain a parallel with %getWeekday% (which itself is an alias for Javascript native %getDay%), Sunday is considered day %0%. This contrasts with ISO-8601 standard (used in %getISOWeek% and %setISOWeek%) which places Sunday at the end of the week (day 7). This effectively means that passing %0% to this method while in the middle of a week will rewind the date, where passing %7% will advance it.","examples":[{"html":"d = new Date(); d.setWeekday(1); d;"},{"html":"d = new Date(); d.setWeekday(6); d;"}]},"setISOWeek":{"line":1795,"returns":"Nothing","short":"Sets the week (of the year) as defined by the ISO-8601 standard.","extra":"Note that this standard places Sunday at the end of the week (day 7).","examples":[{"html":"d = new Date(); d.setISOWeek(15); d;"}]},"getISOWeek":{"line":1820,"returns":"Number","short":"Gets the date's week (of the year) as defined by the ISO-8601 standard.","extra":"Note that this standard places Sunday at the end of the week (day 7). If %utc% is set on the date, the week will be according to UTC time.","examples":[{"html":"new Date().getISOWeek()"}]},"beginningOfISOWeek":{"line":1835,"returns":"Date","short":"Set the date to the beginning of week as defined by this ISO-8601 standard.","extra":"Note that this standard places Monday at the start of the week.","examples":[{"html":"Date.create().beginningOfISOWeek()"}]},"endOfISOWeek":{"line":1856,"returns":"Date","short":"Set the date to the end of week as defined by this ISO-8601 standard.","extra":"Note that this standard places Sunday at the end of the week.","examples":[{"html":"Date.create().endOfISOWeek()"}]},"getUTCOffset":{"params":[{"name":"iso","type":null,"required":false,"default":null}],"line":1873,"returns":"String","short":"Returns a string representation of the offset from UTC time. If [iso] is true the offset will be in ISO8601 format.","examples":[{"html":"new Date().getUTCOffset()"},{"html":"new Date().getUTCOffset(true)"}]},"utc":{"params":[{"name":"on","type":"boolean","required":false,"default":"true"}],"line":1890,"returns":"Date","short":"Sets the internal utc flag for the date. When on, UTC-based methods will be called internally.","extra":"For more see @date_format.","examples":[{"html":"new Date().utc(true)"},{"html":"new Date().utc(false)"}]},"isUTC":{"line":1906,"returns":"Boolean","short":"Returns true if the date has no timezone offset.","extra":"This will also return true for utc-based dates (dates that have the %utc% method set true). Note that even if the utc flag is set, %getTimezoneOffset% will always report the same thing as Javascript always reports that based on the environment's locale.","examples":[{"html":"new Date().isUTC()"},{"html":"new Date().utc(true).isUTC()"}]},"advance":{"params":[{"name":"set","type":null,"required":true,"default":null},{"name":"reset","type":"boolean","required":false,"default":"false"}],"line":1921,"returns":"Date","short":"Sets the date forward.","extra":"This method can accept multiple formats including an object, a string in the format %3 days%, a single number as milliseconds, or enumerated parameters (as with the Date constructor). If [reset] is %true%, any units more specific than those passed will be reset. For more see @date_format.","examples":[{"html":"new Date().advance({ year: 2 })"},{"html":"new Date().advance('2 days')"},{"html":"new Date().advance(0, 2, 3)"},{"html":"new Date().advance(86400000)"}]},"rewind":{"params":[{"name":"set","type":null,"required":true,"default":null},{"name":"reset","type":"boolean","required":false,"default":"false"}],"line":1939,"returns":"Date","short":"Sets the date back.","extra":"This method can accept multiple formats including a single number as a timestamp, an object, or enumerated parameters (as with the Date constructor). If [reset] is %true%, any units more specific than those passed will be reset. For more see @date_format.","examples":[{"html":"new Date().rewind({ year: 2 })"},{"html":"new Date().rewind(0, 2, 3)"},{"html":"new Date().rewind(86400000)"}]},"isValid":{"line":1956,"returns":"Boolean","short":"Returns true if the date is valid.","examples":[{"html":"new Date().isValid()"},{"html":"new Date('flexor').isValid()"}]},"isAfter":{"params":[{"name":"d","type":null,"required":true,"default":null},{"name":"margin","type":"number","required":false,"default":"0"}],"line":1970,"returns":"Boolean","short":"Returns true if the date is after the <d>.","extra":"[margin] is to allow extra margin of error (in ms). <d> will accept a date object, timestamp, or text format. If not specified, <d> is assumed to be now. See @date_format for more.","examples":[{"html":"new Date().isAfter('tomorrow')"},{"html":"new Date().isAfter('yesterday')"}]},"isBefore":{"params":[{"name":"d","type":null,"required":true,"default":null},{"name":"margin","type":"number","required":false,"default":"0"}],"line":1985,"returns":"Boolean","short":"Returns true if the date is before <d>.","extra":"[margin] is to allow extra margin of error (in ms). <d> will accept a date object, timestamp, or text format. If not specified, <d> is assumed to be now. See @date_format for more.","examples":[{"html":"new Date().isBefore('tomorrow')"},{"html":"new Date().isBefore('yesterday')"}]},"isBetween":{"params":[{"name":"d1","type":null,"required":true,"default":null},{"name":"d2","type":null,"required":true,"default":null},{"name":"margin","type":"number","required":false,"default":"0"}],"line":2000,"returns":"Boolean","short":"Returns true if the date falls between <d1> and <d2>.","extra":"[margin] is to allow extra margin of error (in ms). <d1> and <d2> will accept a date object, timestamp, or text format. If not specified, they are assumed to be now. See @date_format for more.","examples":[{"html":"new Date().isBetween('yesterday', 'tomorrow')"},{"html":"new Date().isBetween('last year', '2 years ago')"}]},"isLeapYear":{"line":2021,"returns":"Boolean","short":"Returns true if the date is a leap year.","examples":[{"html":"Date.create('2000').isLeapYear()"}]},"daysInMonth":{"line":2035,"returns":"Number","short":"Returns the number of days in the date's month.","examples":[{"html":"Date.create('May').daysInMonth()"},{"html":"Date.create('February, 2000').daysInMonth()"}]},"format":{"params":[{"name":"format","type":null,"required":true,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":2049,"returns":"String","short":"Formats and outputs the date.","extra":"<format> can be a number of pre-determined formats or a string of tokens. Locale-specific formats are %short%, %long%, and %full% which have their own aliases and can be called with %date.short()%, etc. If <format> is not specified the %long% format is assumed. [locale] specifies a locale code to use (if not specified the current locale is used). See @date_format for more details.","set":["short","long","full"],"examples":[{"html":"Date.create().format()"},{"html":"Date.create().format('{Weekday} {d} {Month}, {yyyy}')"},{"html":"Date.create().format('{hh}:{mm}')"},{"html":"Date.create().format('{12hr}:{mm}{tt}')"},{"html":"Date.create().format(Date.ISO8601_DATETIME)"},{"html":"Date.create('last week').format('short', 'ja')"},{"multi_line":true,"html":"Date.create('yesterday').format(function(value,unit,ms,loc) {\\n// value = 1, unit = 3, ms = -86400000, loc = [current locale object]\\n});"}]},"relative":{"params":[{"name":"fn","type":null,"required":false,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":2077,"returns":"String","short":"Returns a relative date string offset to the current time.","extra":"[fn] can be passed to provide for more granular control over the resulting string. [fn] is passed 4 arguments: the adjusted value, unit, offset in milliseconds, and a localization object. As an alternate syntax, [locale] can also be passed as the first (and only) parameter. For more, see @date_format.","examples":[{"html":"Date.create('90 seconds ago').relative()"},{"html":"Date.create('January').relative()"},{"html":"Date.create('January').relative('ja')"},{"multi_line":true,"html":"Date.create('120 minutes ago').relative(function(val,unit,ms,loc) {\\n// value = 2, unit = 3, ms = -7200, loc = [current locale object]\\n});"}]},"is":{"params":[{"name":"d","type":null,"required":true,"default":null},{"name":"margin","type":"number","required":false,"default":"0"}],"line":2100,"returns":"Boolean","short":"Returns true if the date is <d>.","extra":"<d> will accept a date object, timestamp, or text format. %is% additionally understands more generalized expressions like month/weekday names, 'today', etc, and compares to the precision implied in <d>. [margin] allows an extra margin of error in milliseconds.  For more, see @date_format.","examples":[{"html":"Date.create().is('July')"},{"html":"Date.create().is('1776')"},{"html":"Date.create().is('today')"},{"html":"Date.create().is('weekday')"},{"html":"Date.create().is('July 4, 1776')"},{"html":"Date.create().is(-6106093200000)"},{"html":"Date.create().is(new Date(1776, 6, 4))"}]},"reset":{"params":[{"name":"unit","type":"string","required":false,"default":"'hours'"}],"line":2134,"returns":"Date","short":"Resets the unit passed and all smaller units. Default is \"hours\", effectively resetting the time.","examples":[{"html":"Date.create().reset('day')"},{"html":"Date.create().reset('month')"}]},"clone":{"line":2155,"returns":"Date","short":"Clones the date.","examples":[{"html":"Date.create().clone()"}]},"iso":{"line":2176,"alias":"toISOString","short":"Alias for %toISOString%."},"getWeekday":{"line":2185,"returns":"Number","short":"Alias for %getDay%.","set":["getUTCWeekday"],"examples":[{"multi_line":true,"force_result":true,"html":"   Date.create().getWeekday();"},{"multi_line":true,"force_result":true,"html":"   Date.create().getUTCWeekday();"}]}},"Number":{"[unit]":{"line":2210,"returns":"Number","short":"Takes the number as a corresponding unit of time and converts to milliseconds.","extra":"Method names can be singular or plural.  Note that as \"a month\" is ambiguous as a unit of time, %months% will be equivalent to 30.4375 days, the average number in a month. Be careful using %months% if you need exact precision.","set":["millisecond","milliseconds","second","seconds","minute","minutes","hour","hours","day","days","week","weeks","month","months","year","years"],"examples":[{"html":"(5).milliseconds()"},{"html":"(10).hours()"},{"html":"(1).day()"}]},"[unit]Before":{"params":[{"name":"d","type":null,"required":false,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":2240,"returns":"Date","short":"Returns a date that is <n> units before [d], where <n> is the number.","extra":"[d] will accept a date object, timestamp, or text format. Note that \"months\" is ambiguous as a unit of time. If the target date falls on a day that does not exist (ie. August 31 -> February 31), the date will be shifted to the last day of the month. Be careful using %monthsBefore% if you need exact precision. See @date_format for more.","set":["millisecondBefore","millisecondsBefore","secondBefore","secondsBefore","minuteBefore","minutesBefore","hourBefore","hoursBefore","dayBefore","daysBefore","weekBefore","weeksBefore","monthBefore","monthsBefore","yearBefore","yearsBefore"],"examples":[{"html":"(5).daysBefore('tuesday')"},{"html":"(1).yearBefore('January 23, 1997')"}]},"[unit]Ago":{"line":2269,"returns":"Date","short":"Returns a date that is <n> units ago.","extra":"Note that \"months\" is ambiguous as a unit of time. If the target date falls on a day that does not exist (ie. August 31 -> February 31), the date will be shifted to the last day of the month. Be careful using %monthsAgo% if you need exact precision.","set":["millisecondAgo","millisecondsAgo","secondAgo","secondsAgo","minuteAgo","minutesAgo","hourAgo","hoursAgo","dayAgo","daysAgo","weekAgo","weeksAgo","monthAgo","monthsAgo","yearAgo","yearsAgo"],"examples":[{"html":"(5).weeksAgo()"},{"html":"(1).yearAgo()"}]},"[unit]After":{"params":[{"name":"d","type":null,"required":false,"default":null},{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":2298,"returns":"Date","short":"Returns a date <n> units after [d], where <n> is the number.","extra":"[d] will accept a date object, timestamp, or text format. Note that \"months\" is ambiguous as a unit of time. If the target date falls on a day that does not exist (ie. August 31 -> February 31), the date will be shifted to the last day of the month. Be careful using %monthsAfter% if you need exact precision. See @date_format for more.","set":["millisecondAfter","millisecondsAfter","secondAfter","secondsAfter","minuteAfter","minutesAfter","hourAfter","hoursAfter","dayAfter","daysAfter","weekAfter","weeksAfter","monthAfter","monthsAfter","yearAfter","yearsAfter"],"examples":[{"html":"(5).daysAfter('tuesday')"},{"html":"(1).yearAfter('January 23, 1997')"}]},"[unit]FromNow":{"line":2327,"returns":"Date","short":"Returns a date <n> units from now.","extra":"Note that \"months\" is ambiguous as a unit of time. If the target date falls on a day that does not exist (ie. August 31 -> February 31), the date will be shifted to the last day of the month. Be careful using %monthsFromNow% if you need exact precision.","set":["millisecondFromNow","millisecondsFromNow","secondFromNow","secondsFromNow","minuteFromNow","minutesFromNow","hourFromNow","hoursFromNow","dayFromNow","daysFromNow","weekFromNow","weeksFromNow","monthFromNow","monthsFromNow","yearFromNow","yearsFromNow"],"examples":[{"html":"(5).weeksFromNow()"},{"html":"(1).yearFromNow()"}]},"duration":{"params":[{"name":"locale","type":null,"required":false,"default":"currentLocale"}],"line":2377,"returns":"String","short":"Takes the number as milliseconds and returns a unit-adjusted localized string.","extra":"This method is the same as %Date#relative% without the localized equivalent of \"from now\" or \"ago\". [locale] can be passed as the first (and only) parameter. Note that this method is only available when the dates package is included.","examples":[{"html":"(500).duration()"},{"html":"(1200).duration()"},{"html":"(75).minutes().duration()"},{"html":"(75).minutes().duration('es')"}]}}},"dependency":"core","description":"Date parsing and formatting, relative formats like \"1 minute ago\", Number methods like \"daysAgo\", localization support with default English locale definition."},"date_locales":{"size":49173,"minified_size":5176,"extra":true,"modules":{"Date":{}},"dependency":"date","description":"Locale definitions French (fr), Italian (it), Spanish (es), Portuguese (pt), German (de), Russian (ru), Polish (pl), Swedish (sv), Japanese (ja), Korean (ko), Simplified Chinese (zh-CN), and Traditional Chinese (zh-TW). Locales can also be included individually. See @date_locales for more."},"range":{"size":12153,"minified_size":771,"extra":false,"modules":{"Range":{"toString":{"line":78,"returns":"String","short":"Returns a string representation of the range.","examples":[{"html":"Number.range(1, 5).toString()"},{"html":"Date.range(new Date(2003, 0), new Date(2005, 0)).toString()"}]},"isValid":{"line":101,"returns":"Boolean","short":"Returns true if the range is valid, false otherwise.","examples":[{"html":"Date.range(new Date(2003, 0), new Date(2005, 0)).isValid()"},{"html":"Number.range(NaN, NaN).isValid()"}]},"span":{"line":115,"returns":"Number","short":"Returns the span of the range. If the range is a date range, the value is in milliseconds.","extra":"The span includes both the start and the end.","examples":[{"html":"Number.range(5, 10).span()"},{"html":"Date.range(new Date(2003, 0), new Date(2005, 0)).span()"}]},"contains":{"params":[{"name":"obj","type":null,"required":true,"default":null}],"line":132,"returns":"Boolean","short":"Returns true if <obj> is contained inside the range. <obj> may be a value or another range.","examples":[{"html":"Number.range(5, 10).contains(7)"},{"html":"Date.range(new Date(2003, 0), new Date(2005, 0)).contains(new Date(2004, 0))"}]},"every":{"params":[{"name":"amount","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":false,"default":null}],"line":153,"returns":"Array","short":"Iterates through the range for every <amount>, calling [fn] if it is passed. Returns an array of each increment visited.","extra":"In the case of date ranges, <amount> can also be a string, in which case it will increment a number of  units. Note that %(2).months()% first resolves to a number, which will be interpreted as milliseconds and is an approximation, so stepping through the actual months by passing %\"2 months\"% is usually preferable.","examples":[{"html":"Number.range(2, 8).every(2)"},{"html":"Date.range(new Date(2003, 1), new Date(2003,3)).every(\"2 months\")"}]},"union":{"params":[{"name":"range","type":null,"required":true,"default":null}],"line":201,"returns":"Range","short":"Returns a new range with the earliest starting point as its start, and the latest ending point as its end. If the two ranges do not intersect this will effectively remove the \"gap\" between them.","examples":[{"html":"Number.range(1, 3).union(Number.range(2, 5))"},{"html":"Date.range(new Date(2003, 1), new Date(2005, 1)).union(Date.range(new Date(2004, 1), new Date(2006, 1)))"}]},"intersect":{"params":[{"name":"range","type":null,"required":true,"default":null}],"line":218,"returns":"Range","short":"Returns a new range with the latest starting point as its start, and the earliest ending point as its end. If the two ranges do not intersect this will effectively produce an invalid range.","examples":[{"html":"Number.range(1, 5).intersect(Number.range(4, 8))"},{"html":"Date.range(new Date(2003, 1), new Date(2005, 1)).intersect(Date.range(new Date(2004, 1), new Date(2006, 1)))"}]},"clone":{"line":238,"returns":"Range","short":"Clones the range.","extra":"Members of the range will also be cloned.","examples":[{"html":"Number.range(1, 5).clone()"}]},"clamp":{"params":[{"name":"obj","type":null,"required":true,"default":null}],"line":252,"returns":"Mixed","short":"Clamps <obj> to be within the range if it falls outside.","examples":[{"html":"Number.range(1, 5).clamp(8)"},{"html":"Date.range(new Date(2010, 0), new Date(2012, 0)).clamp(new Date(2013, 0))"}]}},"Number":{"range":{"class_method":true,"params":[{"name":"start","type":null,"required":false,"default":null},{"name":"end","type":null,"required":false,"default":null}],"line":283,"returns":"Range","short":"Creates a new range between [start] and [end]. See @ranges for more.","examples":[{"html":"Number.range(5, 10)"}]},"upto":{"params":[{"name":"num","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":false,"default":null},{"name":"step","type":"number","required":false,"default":"1"}],"line":335,"returns":"Array","short":"Returns an array containing numbers from the number up to <num>.","extra":"Optionally calls [fn] callback for each number in that array. [step] allows multiples greater than 1.","examples":[{"html":"(2).upto(6)"},{"multi_line":true,"html":"(2).upto(6, function(n) {// This function is called 5 times receiving n as the value.\\n});"},{"html":"(2).upto(8, null, 2)"}]},"clamp":{"params":[{"name":"start","type":null,"required":false,"default":"Infinity"},{"name":"end","type":null,"required":false,"default":"Infinity"}],"line":353,"returns":"Number","short":"Constrains the number so that it is between [start] and [end].","extra":"This will build a range object that has an equivalent %clamp% method.","examples":[{"html":"(3).clamp(50, 100)"},{"html":"(85).clamp(50, 100)"}]},"cap":{"params":[{"name":"max","type":null,"required":false,"default":"Infinity"}],"line":368,"returns":"Number","short":"Constrains the number so that it is no greater than [max].","extra":"This will build a range object that has an equivalent %cap% method.","examples":[{"html":"(100).cap(80)"}]},"downto":{"params":[{"name":"num","type":null,"required":true,"default":null},{"name":"fn","type":null,"required":false,"default":null},{"name":"step","type":"number","required":false,"default":"1"}],"line":386,"returns":"Array","short":"Returns an array containing numbers from the number down to <num>.","extra":"Optionally calls [fn] callback for each number in that array. [step] allows multiples greater than 1.","examples":[{"html":"(8).downto(3)"},{"multi_line":true,"html":"(8).downto(3, function(n) {// This function is called 6 times receiving n as the value.\\n});"},{"html":"(8).downto(2, null, 2)"}]}},"String":{"range":{"class_method":true,"params":[{"name":"start","type":null,"required":false,"default":null},{"name":"end","type":null,"required":false,"default":null}],"line":293,"returns":"Range","short":"Creates a new range between [start] and [end]. See @ranges for more.","examples":[{"html":"String.range('a', 'z')"}]}},"Date":{"range":{"class_method":true,"params":[{"name":"start","type":null,"required":false,"default":null},{"name":"end","type":null,"required":false,"default":null}],"line":303,"returns":"Range","short":"Creates a new range between [start] and [end].","extra":"If either [start] or [end] are null, they will default to the current date. See @ranges for more.","examples":[{"html":"Date.range('today', 'tomorrow')"}]}},"Array":{}},"dependency":"core","description":"Ranges allow creating spans of numbers, strings, or dates. They can enumerate over specific points within that range, and be manipulated and compared."},"function":{"size":9418,"minified_size":460,"extra":false,"modules":{"Function":{"lazy":{"params":[{"name":"ms","type":"number","required":false,"default":"1"},{"name":"immediate","type":"boolean","required":false,"default":"false"},{"name":"limit","type":null,"required":false,"default":"Infinity"}],"line":30,"returns":"Function","short":"Creates a lazy function that, when called repeatedly, will queue execution and wait [ms] milliseconds to execute.","extra":"If [immediate] is %true%, first execution will happen immediately, then lock. If [limit] is a fininte number, calls past [limit] will be ignored while execution is locked. Compare this to %throttle%, which will execute only once per [ms] milliseconds. Note that [ms] can also be a fraction. Calling %cancel% on a lazy function will clear the entire queue. For more see @functions.","examples":[{"multi_line":true,"html":"(function() {\\n// Executes immediately.\\n}).lazy()();"},{"multi_line":true,"html":"(3).times(function() {\\n// Executes 3 times, with each execution 20ms later than the last.\\n}.lazy(20));"},{"multi_line":true,"html":"(100).times(function() {\\n// Executes 50 times, with each execution 20ms later than the last.\\n}.lazy(20, false, 50));"}]},"throttle":{"params":[{"name":"ms","type":"number","required":false,"default":"1"}],"line":90,"returns":"Function","short":"Creates a \"throttled\" version of the function that will only be executed once per <ms> milliseconds.","extra":"This is functionally equivalent to calling %lazy% with a [limit] of %1% and [immediate] as %true%. %throttle% is appropriate when you want to make sure a function is only executed at most once for a given duration. For more see @functions.","examples":[{"multi_line":true,"html":"(3).times(function() {\\n// called only once. will wait 50ms until it responds again\\n}.throttle(50));"}]},"debounce":{"params":[{"name":"ms","type":"number","required":false,"default":"1"}],"line":106,"returns":"Function","short":"Creates a \"debounced\" function that postpones its execution until after <ms> milliseconds have passed.","extra":"This method is useful to execute a function after things have \"settled down\". A good example of this is when a user tabs quickly through form fields, execution of a heavy operation should happen after a few milliseconds when they have \"settled\" on a field. For more see @functions.","examples":[{"multi_line":true,"html":"var fn = (function(arg1) {\\n// called once 50ms later\\n}).debounce(50); fn() fn() fn();"}]},"delay":{"accepts_unlimited_params":true,"params":[{"name":"ms","type":"number","required":false,"default":"1"},{"name":"arg1","type":null,"required":false,"default":null}],"line":127,"returns":"Function","short":"Executes the function after <ms> milliseconds.","extra":"Returns a reference to itself. %delay% is also a way to execute non-blocking operations that will wait until the CPU is free. Delayed functions can be canceled using the %cancel% method. Can also curry arguments passed in after <ms>.","examples":[{"multi_line":true,"html":"(function(arg1) {\\n// called 1s later\\n}).delay(1000, 'arg1');"}]},"every":{"accepts_unlimited_params":true,"params":[{"name":"ms","type":"number","required":false,"default":"1"},{"name":"arg1","type":null,"required":false,"default":null}],"line":146,"returns":"Function","short":"Executes the function every <ms> milliseconds.","extra":"Returns a reference to itself. Repeating functions with %every% can be canceled using the %cancel% method. Can also curry arguments passed in after <ms>.","examples":[{"multi_line":true,"html":"(function(arg1) {\\n// called every 1s\\n}).every(1000, 'arg1');"}]},"cancel":{"line":169,"returns":"Function","short":"Cancels a delayed function scheduled to be run.","extra":"%delay%, %lazy%, %throttle%, and %debounce% can all set delays.","examples":[{"multi_line":true,"html":"(function() {\\nalert('hay'); // Never called\\n}).delay(500).cancel();"}]},"after":{"params":[{"name":"num","type":"number","required":false,"default":"1"}],"line":192,"returns":"Function","short":"Creates a function that will execute after [num] calls.","extra":"%after% is useful for running a final callback after a series of asynchronous operations, when the order in which the operations will complete is unknown.","examples":[{"multi_line":true,"html":"var fn = (function() {\\n// Will be executed once only\\n}).after(3); fn(); fn(); fn();"}]},"once":{"line":225,"returns":"Function","short":"Creates a function that will execute only once and store the result.","extra":"%once% is useful for creating functions that will cache the result of an expensive operation and use it on subsequent calls. Also it can be useful for creating initialization functions that only need to be run once.","examples":[{"multi_line":true,"html":"var fn = (function() {\\n// Will be executed once only\\n}).once(); fn(); fn(); fn();"}]},"fill":{"accepts_unlimited_params":true,"params":[{"name":"arg1","type":null,"required":true,"default":null},{"name":"arg2","type":null,"required":true,"default":null}],"line":241,"returns":"Function","short":"Returns a new version of the function which when called will have some of its arguments pre-emptively filled in, also known as \"currying\".","extra":"Arguments passed to a \"filled\" function are generally appended to the curried arguments. However, if %undefined% is passed as any of the arguments to %fill%, it will be replaced, when the \"filled\" function is executed. This allows currying of arguments even when they occur toward the end of an argument list (the example demonstrates this much more clearly).","examples":[{"multi_line":true,"html":"var delayOneSecond = setTimeout.fill(undefined, 1000);"},{"multi_line":true,"html":"delayOneSecond(function() {\\n// Will be executed 1s later\\n});"}]}}},"dependency":"core","description":"Lazy, throttled, and memoized functions, delayed functions and handling of timers, argument currying."},"number":{"size":11141,"minified_size":698,"extra":false,"modules":{"Number":{"random":{"class_method":true,"params":[{"name":"n1","type":null,"required":false,"default":null},{"name":"n2","type":null,"required":false,"default":null}],"line":36,"returns":"Number","short":"Returns a random integer between [n1] and [n2].","extra":"If only 1 number is passed, the other will be 0. If none are passed, the number will be either 0 or 1.","examples":[{"html":"Number.random(50, 100)"},{"html":"Number.random(50)"},{"html":"Number.random()"}]},"log":{"params":[{"name":"base","type":null,"required":true,"default":"Math.E"}],"line":60,"returns":"Number","short":"Returns the logarithm of the number with base <base>, or natural logarithm of the number if <base> is undefined.","examples":[{"html":"(64).log(2)"},{"html":"(9).log(3)"},{"html":"(5).log()"}]},"abbr":{"params":[{"name":"precision","type":"number","required":false,"default":"0"}],"line":76,"returns":"String","short":"Returns an abbreviated form of the number.","extra":"[precision] will round to the given precision.","examples":[{"html":"(1000).abbr()"},{"html":"(1000000).abbr()"},{"html":"(1280).abbr(1)"}]},"metric":{"params":[{"name":"precision","type":"number","required":false,"default":"0"},{"name":"limit","type":"number","required":false,"default":"1"}],"line":92,"returns":"String","short":"Returns the number as a string in metric notation.","extra":"[precision] will round to the given precision. Both very large numbers and very small numbers are supported. [limit] is the upper limit for the units. The default is %1%, which is \"kilo\". If [limit] is %false%, the upper limit will be \"exa\". The lower limit is \"nano\", and cannot be changed.","examples":[{"html":"(1000).metric()"},{"html":"(1000000).metric()"},{"html":"(1000000).metric(0, false)"},{"html":"(1249).metric(2) + 'g'"},{"html":"(0.025).metric() + 'm'"}]},"bytes":{"params":[{"name":"precision","type":"number","required":false,"default":"0"},{"name":"limit","type":"number","required":false,"default":"4"}],"line":110,"returns":"String","short":"Returns an abbreviated form of the number, considered to be \"Bytes\".","extra":"[precision] will round to the given precision. [limit] is the upper limit for the units. The default is %4%, which is \"terabytes\" (TB). If [limit] is %false%, the upper limit will be \"exa\".","examples":[{"html":"(1000).bytes()"},{"html":"(1000).bytes(2)"},{"html":"((10).pow(20)).bytes()"},{"html":"((10).pow(20)).bytes(0, false)"}]},"isInteger":{"line":127,"returns":"Boolean","short":"Returns true if the number has no trailing decimal.","examples":[{"html":"(420).isInteger()"},{"html":"(4.5).isInteger()"}]},"isOdd":{"line":141,"returns":"Boolean","short":"Returns true if the number is odd.","examples":[{"html":"(3).isOdd()"},{"html":"(18).isOdd()"}]},"isEven":{"line":155,"returns":"Boolean","short":"Returns true if the number is even.","examples":[{"html":"(6).isEven()"},{"html":"(17).isEven()"}]},"isMultipleOf":{"params":[{"name":"num","type":null,"required":true,"default":null}],"line":169,"returns":"Boolean","short":"Returns true if the number is a multiple of <num>.","examples":[{"html":"(6).isMultipleOf(2)"},{"html":"(17).isMultipleOf(2)"},{"html":"(32).isMultipleOf(4)"},{"html":"(34).isMultipleOf(4)"}]},"format":{"params":[{"name":"place","type":"number","required":false,"default":"0"},{"name":"thousands","type":"string","required":false,"default":"','"},{"name":"decimal","type":"string","required":false,"default":"'.'"}],"line":186,"returns":"String","short":"Formats the number to a readable string.","extra":"If [place] is %undefined%, will automatically determine the place. [thousands] is the character used for the thousands separator. [decimal] is the character used for the decimal point.","examples":[{"html":"(56782).format()"},{"html":"(56782).format(2)"},{"html":"(4388.43).format(2, ' ')"},{"html":"(4388.43).format(2, '.', ',')"}]},"hex":{"params":[{"name":"pad","type":"number","required":false,"default":"1"}],"line":223,"returns":"String","short":"Converts the number to hexidecimal.","extra":"[pad] will pad the resulting string to that many places.","examples":[{"html":"(255).hex()"},{"html":"(255).hex(4)"},{"html":"(23654).hex()"}]},"times":{"params":[{"name":"fn","type":null,"required":true,"default":null}],"line":239,"returns":"Number","short":"Calls <fn> a number of times equivalent to the number.","examples":[{"multi_line":true,"html":"(8).times(function(i) {// This function is called 8 times.\\n});"}]},"chr":{"line":259,"returns":"String","short":"Returns a string at the code point of the number.","examples":[{"html":"(65).chr()"},{"html":"(75).chr()"}]},"pad":{"params":[{"name":"place","type":"number","required":true,"default":"0"},{"name":"sign","type":"boolean","required":false,"default":"false"},{"name":"base","type":"number","required":false,"default":"10"}],"line":273,"returns":"String","short":"Pads a number with \"0\" to <place>.","extra":"[sign] allows you to force the sign as well (+05, etc). [base] can change the base for numeral conversion.","examples":[{"html":"(5).pad(2)"},{"html":"(-5).pad(4)"},{"html":"(82).pad(3, true)"}]},"ordinalize":{"line":289,"returns":"String","short":"Returns an ordinalized (English) string, i.e. \"1st\", \"2nd\", etc.","examples":[{"html":"(1).ordinalize()"},{"html":"(2).ordinalize()"},{"html":"(8).ordinalize()"}]},"toNumber":{"line":305,"returns":"Number","short":"Returns a number. This is mostly for compatibility reasons.","examples":[{"html":"(420).toNumber()"}]},"round":{"params":[{"name":"precision","type":"number","required":true,"default":"0"}],"line":320,"returns":"Number","short":"Shortcut for %Math.round% that also allows a <precision>.","examples":[{"html":"(3.241).round()"},{"html":"(-3.841).round()"},{"html":"(3.241).round(2)"},{"html":"(3748).round(-2)"}]},"ceil":{"params":[{"name":"precision","type":"number","required":true,"default":"0"}],"line":332,"returns":"Number","short":"Shortcut for %Math.ceil% that also allows a <precision>.","examples":[{"html":"(3.241).ceil()"},{"html":"(-3.241).ceil()"},{"html":"(3.241).ceil(2)"},{"html":"(3748).ceil(-2)"}]},"floor":{"params":[{"name":"precision","type":"number","required":true,"default":"0"}],"line":344,"returns":"Number","short":"Shortcut for %Math.floor% that also allows a <precision>.","examples":[{"html":"(3.241).floor()"},{"html":"(-3.841).floor()"},{"html":"(3.241).floor(2)"},{"html":"(3748).floor(-2)"}]},"[math]":{"line":356,"returns":"Number","short":"Math related functions are mapped as shortcuts to numbers and are identical. Note that %Number#log% provides some special defaults.","set":["abs","sin","asin","cos","acos","tan","atan","sqrt","exp","pow"],"examples":[{"html":"(3).pow(3)"},{"html":"(-3).abs()"},{"html":"(1024).sqrt()"}]}}},"dependency":"core","description":"Number formatting, rounding (with precision), and ranges. Aliases to Math methods."},"regexp":{"size":2177,"minified_size":169,"extra":false,"modules":{"RegExp":{"escape":{"class_method":true,"params":[{"name":"str","type":"string","required":true,"default":"''"}],"line":18,"returns":"String","short":"Escapes all RegExp tokens in a string.","examples":[{"html":"RegExp.escape('really?')"},{"html":"RegExp.escape('yes.')"},{"html":"RegExp.escape('(not really)')"}]},"getFlags":{"line":37,"returns":"String","short":"Returns the flags of the regex as a string.","examples":[{"html":"/texty/gim.getFlags('testy')"}]},"setFlags":{"params":[{"name":"flags","type":null,"required":true,"default":null}],"line":50,"returns":"RegExp","short":"Sets the flags on a regex and retuns a copy.","examples":[{"html":"/texty/.setFlags('gim')"}]},"addFlag":{"params":[{"name":"flag","type":null,"required":true,"default":null}],"line":63,"returns":"RegExp","short":"Adds <flag> to the regex.","examples":[{"html":"/texty/.addFlag('g')"}]},"removeFlag":{"params":[{"name":"flag","type":null,"required":true,"default":null}],"line":76,"returns":"RegExp","short":"Removes <flag> from the regex.","examples":[{"html":"/texty/g.removeFlag('g')"}]}}},"dependency":"core","description":"Escaping regexes and manipulating their flags."},"string":{"size":28550,"minified_size":2036,"extra":false,"modules":{"String":{"repeat":{"params":[{"name":"num","type":"number","required":false,"default":"0"}],"line":142,"returns":"String","short":"Returns the string repeated [num] times.","examples":[{"html":"'jumpy'.repeat(2)"},{"html":"'a'.repeat(5)"},{"html":"'a'.repeat(0)"}]},"startsWith":{"params":[{"name":"find","type":null,"required":true,"default":null},{"name":"pos","type":"number","required":false,"default":"0"},{"name":"case","type":"boolean","required":false,"default":"true"}],"line":162,"returns":"Boolean","short":"Returns true if the string starts with <find>.","extra":"<find> may be either a string or regex. Search begins at [pos], which defaults to the entire string. Case sensitive if [case] is true.","examples":[{"html":"'hello'.startsWith('hell')"},{"html":"'hello'.startsWith(/[a-h]/)"},{"html":"'hello'.startsWith('HELL')"},{"html":"'hello'.startsWith('ell', 1)"},{"html":"'hello'.startsWith('HELL', 0, false)"}]},"endsWith":{"params":[{"name":"find","type":null,"required":true,"default":null},{"name":"pos","type":null,"required":false,"default":"length"},{"name":"case","type":"boolean","required":false,"default":"true"}],"line":184,"returns":"Boolean","short":"Returns true if the string ends with <find>.","extra":"<find> may be either a string or regex. Search ends at [pos], which defaults to the entire string. Case sensitive if [case] is true.","examples":[{"html":"'jumpy'.endsWith('py')"},{"html":"'jumpy'.endsWith(/[q-z]/)"},{"html":"'jumpy'.endsWith('MPY')"},{"html":"'jumpy'.endsWith('mp', 4)"},{"html":"'jumpy'.endsWith('MPY', 5, false)"}]},"escapeRegExp":{"line":210,"returns":"String","short":"Escapes all RegExp tokens in the string.","examples":[{"html":"'really?'.escapeRegExp()"},{"html":"'yes.'.escapeRegExp()"},{"html":"'(not really)'.escapeRegExp()"}]},"escapeURL":{"params":[{"name":"param","type":"boolean","required":false,"default":"false"}],"line":225,"returns":"String","short":"Escapes characters in a string to make a valid URL.","extra":"If [param] is true, it will also escape valid URL characters for use as a URL parameter.","examples":[{"html":"'http://foo.com/\"bar\"'.escapeURL()"},{"html":"'http://foo.com/\"bar\"'.escapeURL(true)"}]},"unescapeURL":{"params":[{"name":"partial","type":"boolean","required":false,"default":"false"}],"line":240,"returns":"String","short":"Restores escaped characters in a URL escaped string.","extra":"If [partial] is true, it will only unescape non-valid URL characters. [partial] is included here for completeness, but should very rarely be needed.","examples":[{"html":"'http%3A%2F%2Ffoo.com%2Fthe%20bar'.unescapeURL()"},{"html":"'http%3A%2F%2Ffoo.com%2Fthe%20bar'.unescapeURL(true)"}]},"escapeHTML":{"line":255,"returns":"String","short":"Converts HTML characters to their entity equivalents.","examples":[{"html":"'<p>some text</p>'.escapeHTML()"},{"html":"'one & two'.escapeHTML()"}],"escape_html":true},"unescapeHTML":{"params":[{"name":"partial","type":"boolean","required":false,"default":"false"}],"line":274,"returns":"String","short":"Restores escaped HTML characters.","examples":[{"html":"'&lt;p&gt;some text&lt;/p&gt;'.unescapeHTML()"},{"html":"'one &amp; two'.unescapeHTML()"}],"escape_html":true},"encodeBase64":{"line":293,"returns":"String","short":"Encodes the string into base64 encoding.","extra":"This method wraps the browser native %btoa% when available, and uses a custom implementation when not available. It can also handle Unicode string encodings.","examples":[{"html":"'gonna get encoded!'.encodeBase64()"},{"html":"'http://twitter.com/'.encodeBase64()"}]},"decodeBase64":{"line":308,"returns":"String","short":"Decodes the string from base64 encoding.","extra":"This method wraps the browser native %atob% when available, and uses a custom implementation when not available. It can also handle Unicode string encodings.","examples":[{"html":"'aHR0cDovL3R3aXR0ZXIuY29tLw=='.decodeBase64()"},{"html":"'anVzdCBnb3QgZGVjb2RlZA=='.decodeBase64()"}]},"each":{"params":[{"name":"search","type":null,"required":false,"default":"single character"},{"name":"fn","type":null,"required":false,"default":null}],"line":323,"returns":"Array","short":"Runs callback [fn] against each occurence of [search].","extra":"Returns an array of matches. [search] may be either a string or regex, and defaults to every character in the string.","examples":[{"html":"'jumpy'.each()"},{"html":"'jumpy'.each(/[r-z]/)"},{"multi_line":true,"html":"'jumpy'.each(/[r-z]/, function(m) {\\n// Called twice: \"u\", \"y\"\\n});"}]},"shift":{"params":[{"name":"n","type":null,"required":true,"default":null}],"line":358,"returns":"Array","short":"Shifts each character in the string <n> places in the character map.","examples":[{"html":"'a'.shift(1)"},{"html":"'ク'.shift(1)"}]},"codes":{"params":[{"name":"fn","type":null,"required":false,"default":null}],"line":377,"returns":"Array","short":"Runs callback [fn] against each character code in the string. Returns an array of character codes.","examples":[{"html":"'jumpy'.codes()"},{"multi_line":true,"html":"'jumpy'.codes(function(c) {\\n// Called 5 times: 106, 117, 109, 112, 121\\n});"}]},"chars":{"params":[{"name":"fn","type":null,"required":false,"default":null}],"line":399,"returns":"Array","short":"Runs callback [fn] against each character in the string. Returns an array of characters.","examples":[{"html":"'jumpy'.chars()"},{"multi_line":true,"html":"'jumpy'.chars(function(c) {\\n// Called 5 times: \"j\",\"u\",\"m\",\"p\",\"y\"\\n});"}]},"words":{"params":[{"name":"fn","type":null,"required":false,"default":null}],"line":415,"returns":"Array","short":"Runs callback [fn] against each word in the string. Returns an array of words.","extra":"A \"word\" here is defined as any sequence of non-whitespace characters.","examples":[{"html":"'broken wear'.words()"},{"multi_line":true,"html":"'broken wear'.words(function(w) {\\n// Called twice: \"broken\", \"wear\"\\n});"}]},"lines":{"params":[{"name":"fn","type":null,"required":false,"default":null}],"line":432,"returns":"Array","short":"Runs callback [fn] against each line in the string. Returns an array of lines.","examples":[{"html":"'broken wear_NL_and_NL_jumpy jump'.lines()"},{"multi_line":true,"html":"'broken wear_NL_and_NL_jumpy jump'.lines(function(l) {\\n// Called three times: \"broken wear\", \"and\", \"jumpy jump\"\\n});"}]},"paragraphs":{"params":[{"name":"fn","type":null,"required":false,"default":null}],"line":448,"returns":"Array","short":"Runs callback [fn] against each paragraph in the string. Returns an array of paragraphs.","extra":"A paragraph here is defined as a block of text bounded by two or more line breaks.","examples":[{"html":"'Once upon a time._NL__NL_In the land of oz...'.paragraphs()"},{"multi_line":true,"html":"'Once upon a time._NL__NL_In the land of oz...'.paragraphs(function(p) {\\n// Called twice: \"Once upon a time.\", \"In teh land of oz...\"\\n});"}]},"isBlank":{"line":470,"returns":"Boolean","short":"Returns true if the string has a length of 0 or contains only whitespace.","examples":[{"html":"''.isBlank()"},{"html":"'   '.isBlank()"},{"html":"'noway'.isBlank()"}]},"has":{"params":[{"name":"find","type":null,"required":true,"default":null}],"line":485,"returns":"Boolean","short":"Returns true if the string matches <find>.","extra":"<find> may be a string or regex.","examples":[{"html":"'jumpy'.has('py')"},{"html":"'broken'.has(/[a-n]/)"},{"html":"'broken'.has(/[s-z]/)"}]},"add":{"params":[{"name":"str","type":null,"required":true,"default":null},{"name":"index","type":null,"required":false,"default":"length"}],"line":502,"returns":"String","short":"Adds <str> at [index]. Negative values are also allowed.","extra":"%insert% is provided as an alias, and is generally more readable when using an index.","examples":[{"html":"'schfifty'.add(' five')"},{"html":"'dopamine'.insert('e', 3)"},{"html":"'spelling eror'.insert('r', -3)"}]},"remove":{"params":[{"name":"f","type":null,"required":true,"default":null}],"line":519,"returns":"String","short":"Removes any part of the string that matches <f>.","extra":"<f> can be a string or a regex.","examples":[{"html":"'schfifty five'.remove('f')"},{"html":"'schfifty five'.remove(/[a-f]/g)"}]},"reverse":{"line":534,"returns":"String","short":"Reverses the string.","examples":[{"html":"'jumpy'.reverse()"},{"html":"'lucky charms'.reverse()"}]},"compact":{"line":548,"returns":"String","short":"Compacts all white space in the string to a single space and trims the ends.","examples":[{"html":"'too _NL_ much _NL_ space'.compact()"},{"html":"'enough _NL_ '.compact()"}]},"at":{"params":[{"name":"index","type":null,"required":true,"default":null},{"name":"loop","type":"boolean","required":false,"default":"true"}],"line":564,"returns":"String or Array","short":"Gets the character(s) at a given index.","extra":"When [loop] is true, overshooting the end of the string (or the beginning) will begin counting from the other end. As an alternate syntax, passing multiple indexes will get the characters at those indexes.","examples":[{"html":"'jumpy'.at(0)"},{"html":"'jumpy'.at(2)"},{"html":"'jumpy'.at(5)"},{"html":"'jumpy'.at(5, false)"},{"html":"'jumpy'.at(-1)"},{"html":"'lucky charms'.at(2,4,6,8)"}]},"from":{"params":[{"name":"index","type":"number","required":false,"default":"0"}],"line":583,"returns":"String","short":"Returns a section of the string starting from [index].","examples":[{"html":"'lucky charms'.from()"},{"html":"'lucky charms'.from(7)"}]},"to":{"params":[{"name":"index","type":null,"required":false,"default":"end"}],"line":597,"returns":"String","short":"Returns a section of the string ending at [index].","examples":[{"html":"'lucky charms'.to()"},{"html":"'lucky charms'.to(7)"}]},"dasherize":{"line":612,"returns":"String","short":"Converts underscores and camel casing to hypens.","examples":[{"html":"'a_farewell_to_arms'.dasherize()"},{"html":"'capsLock'.dasherize()"}]},"underscore":{"line":626,"returns":"String","short":"Converts hyphens and camel casing to underscores.","examples":[{"html":"'a-farewell-to-arms'.underscore()"},{"html":"'capsLock'.underscore()"}]},"camelize":{"params":[{"name":"first","type":"boolean","required":false,"default":"true"}],"line":647,"returns":"String","short":"Converts underscores and hyphens to camel case. If [first] is true the first letter will also be capitalized.","extra":"If the Inflections package is included acryonyms can also be defined that will be used when camelizing.","examples":[{"html":"'caps_lock'.camelize()"},{"html":"'moz-border-radius'.camelize()"},{"html":"'moz-border-radius'.camelize(false)"}]},"spacify":{"line":667,"returns":"String","short":"Converts camel case, underscores, and hyphens to a properly spaced string.","examples":[{"html":"'camelCase'.spacify()"},{"html":"'an-ugly-string'.spacify()"},{"html":"'oh-no_youDid-not'.spacify().capitalize(true)"}]},"stripTags":{"accepts_unlimited_params":true,"params":[{"name":"tag1","type":null,"required":false,"default":null},{"name":"tag2","type":null,"required":false,"default":null}],"line":682,"returns":"String","short":"Strips all HTML tags from the string.","extra":"Tags to strip may be enumerated in the parameters, otherwise will strip all.","examples":[{"html":"'<p>just <b>some</b> text</p>'.stripTags()"},{"html":"'<p>just <b>some</b> text</p>'.stripTags('p')"}],"escape_html":true},"removeTags":{"accepts_unlimited_params":true,"params":[{"name":"tag1","type":null,"required":false,"default":null},{"name":"tag2","type":null,"required":false,"default":null}],"line":701,"returns":"String","short":"Removes all HTML tags and their contents from the string.","extra":"Tags to remove may be enumerated in the parameters, otherwise will remove all.","examples":[{"html":"'<p>just <b>some</b> text</p>'.removeTags()"},{"html":"'<p>just <b>some</b> text</p>'.removeTags('b')"}],"escape_html":true},"truncate":{"params":[{"name":"length","type":null,"required":true,"default":null},{"name":"from","type":"string","required":false,"default":"'right'"},{"name":"ellipsis","type":"string","required":false,"default":"'...'"}],"line":721,"returns":"String","short":"Truncates a string.","extra":"[from] can be %'right'%, %'left'%, or %'middle'%. If the string is shorter than <length>, [ellipsis] will not be added.","examples":[{"html":"'sittin on the dock of the bay'.truncate(18)"},{"html":"'sittin on the dock of the bay'.truncate(18, 'left')"},{"html":"'sittin on the dock of the bay'.truncate(18, 'middle')"}]},"truncateOnWord":{"params":[{"name":"length","type":null,"required":true,"default":null},{"name":"from","type":"string","required":false,"default":"'right'"},{"name":"ellipsis","type":"string","required":false,"default":"'...'"}],"line":737,"returns":"String","short":"Truncates a string without splitting up words.","extra":"[from] can be %'right'%, %'left'%, or %'middle'%. If the string is shorter than <length>, [ellipsis] will not be added.","examples":[{"html":"'here we go'.truncateOnWord(5)"},{"html":"'here we go'.truncateOnWord(5, 'left')"}]},"pad[Side]":{"params":[{"name":"num","type":"null","required":true,"default":"null"},{"name":"padding","type":"string","required":false,"default":"' '"}],"line":752,"returns":"String","short":"Pads the string out with [padding] to be exactly <num> characters.","set":["pad","padLeft","padRight"],"examples":[{"html":"'wasabi'.pad(8)"},{"html":"'wasabi'.padLeft(8)"},{"html":"'wasabi'.padRight(8)"},{"html":"'wasabi'.padRight(8, '-')"}]},"first":{"params":[{"name":"n","type":"number","required":false,"default":"1"}],"line":789,"returns":"String","short":"Returns the first [n] characters of the string.","examples":[{"html":"'lucky charms'.first()"},{"html":"'lucky charms'.first(3)"}]},"last":{"params":[{"name":"n","type":"number","required":false,"default":"1"}],"line":804,"returns":"String","short":"Returns the last [n] characters of the string.","examples":[{"html":"'lucky charms'.last()"},{"html":"'lucky charms'.last(3)"}]},"toNumber":{"params":[{"name":"base","type":"number","required":false,"default":"10"}],"line":820,"returns":"Number","short":"Converts the string into a number.","extra":"Any value with a \".\" fill be converted to a floating point value, otherwise an integer.","examples":[{"html":"'153'.toNumber()"},{"html":"'12,000'.toNumber()"},{"html":"'10px'.toNumber()"},{"html":"'ff'.toNumber(16)"}]},"capitalize":{"params":[{"name":"all","type":"boolean","required":false,"default":"false"}],"line":837,"returns":"String","short":"Capitalizes the first character in the string and downcases all other letters.","extra":"If [all] is true, all words in the string will be capitalized.","examples":[{"html":"'hello'.capitalize()"},{"html":"'hello kitty'.capitalize()"},{"html":"'hello kitty'.capitalize(true)"}]},"assign":{"accepts_unlimited_params":true,"params":[{"name":"obj1","type":null,"required":true,"default":null},{"name":"obj2","type":null,"required":true,"default":null}],"line":860,"returns":"String","short":"Assigns variables to tokens in a string, demarcated with `{}`.","extra":"If an object is passed, it's properties can be assigned using the object's keys (i.e. {name}). If a non-object (string, number, etc.) is passed it can be accessed by the argument number beginning with {1} (as with regex tokens). Multiple objects can be passed and will be merged together (original objects are unaffected).","examples":[{"html":"'Welcome, Mr. {name}.'.assign({ name: 'Franklin' })"},{"html":"'You are {1} years old today.'.assign(14)"},{"html":"'{n} and {r}'.assign({ n: 'Cheech' }, { r: 'Chong' })"}]},"insert":{"line":893,"alias":"add","short":"Alias for %add%."}}},"dependency":"core","description":"String manupulation, escaping, encoding, truncation, and:conversion."},"inflections":{"size":15887,"minified_size":1611,"extra":true,"modules":{"Inflections":{},"String":{"pluralize":{"line":304,"returns":"String","short":"Returns the plural form of the word in the string.","examples":[{"html":"'post'.pluralize()"},{"html":"'octopus'.pluralize()"},{"html":"'sheep'.pluralize()"},{"html":"'words'.pluralize()"},{"html":"'CamelOctopus'.pluralize()"}]},"singularize":{"line":321,"returns":"String","short":"The reverse of String#pluralize. Returns the singular form of a word in a string.","examples":[{"html":"'posts'.singularize()"},{"html":"'octopi'.singularize()"},{"html":"'sheep'.singularize()"},{"html":"'word'.singularize()"},{"html":"'CamelOctopi'.singularize()"}]},"humanize":{"line":338,"returns":"String","short":"Creates a human readable string.","extra":"Capitalizes the first word and turns underscores into spaces and strips a trailing '_id', if any. Like String#titleize, this is meant for creating pretty output.","examples":[{"html":"'employee_salary'.humanize()"},{"html":"'author_id'.humanize()"}]},"titleize":{"line":359,"returns":"String","short":"Creates a title version of the string.","extra":"Capitalizes all the words and replaces some characters in the string to create a nicer looking title. String#titleize is meant for creating pretty output.","examples":[{"html":"'man from the boondocks'.titleize()"},{"html":"'x-men: the last stand'.titleize()"},{"html":"'TheManWithoutAPast'.titleize()"},{"html":"'raiders_of_the_lost_ark'.titleize()"}]},"parameterize":{"line":386,"returns":"String","short":"Replaces special characters in a string so that it may be used as part of a pretty URL.","examples":[{"html":"'hell, no!'.parameterize()"}]}}},"dependency":"string","description":"Pluralization similar to ActiveSupport including uncountable words and acronyms. Humanized and URL-friendly strings."},"language":{"size":9406,"minified_size":1106,"extra":true,"modules":{"Language":{},"String":{"has[Script]":{"line":19,"returns":"Boolean","short":"Returns true if the string contains any characters in that script.","set":["hasArabic","hasCyrillic","hasGreek","hasHangul","hasHan","hasKanji","hasHebrew","hasHiragana","hasKana","hasKatakana","hasLatin","hasThai","hasDevanagari"],"examples":[{"html":"'أتكلم'.hasArabic()"},{"html":"'визит'.hasCyrillic()"},{"html":"'잘 먹겠습니다!'.hasHangul()"},{"html":"'ミックスです'.hasKatakana()"},{"html":"\"l'année\".hasLatin()"}]},"is[Script]":{"line":47,"returns":"Boolean","short":"Returns true if the string contains only characters in that script. Whitespace is ignored.","set":["isArabic","isCyrillic","isGreek","isHangul","isHan","isKanji","isHebrew","isHiragana","isKana","isKatakana","isKatakana","isThai","isDevanagari"],"examples":[{"html":"'أتكلم'.isArabic()"},{"html":"'визит'.isCyrillic()"},{"html":"'잘 먹겠습니다!'.isHangul()"},{"html":"'ミックスです'.isKatakana()"},{"html":"\"l'année\".isLatin()"}]},"hankaku":{"params":[{"name":"mode","type":"string","required":false,"default":"'all'"}],"line":179,"returns":"String","short":"Converts full-width characters (zenkaku) to half-width (hankaku).","extra":"[mode] accepts any combination of \"a\" (alphabet), \"n\" (numbers), \"k\" (katakana), \"s\" (spaces), \"p\" (punctuation), or \"all\".","examples":[{"html":"'タロウ　ＹＡＭＡＤＡです！'.hankaku()"},{"html":"'タロウ　ＹＡＭＡＤＡです！'.hankaku('a')"},{"html":"'タロウ　ＹＡＭＡＤＡです！'.hankaku('alphabet')"},{"html":"'タロウです！　２５歳です！'.hankaku('katakana', 'numbers')"},{"html":"'タロウです！　２５歳です！'.hankaku('k', 'n')"},{"html":"'タロウです！　２５歳です！'.hankaku('kn')"},{"html":"'タロウです！　２５歳です！'.hankaku('sp')"}]},"zenkaku":{"params":[{"name":"mode","type":"string","required":false,"default":"'all'"}],"line":199,"returns":"String","short":"Converts half-width characters (hankaku) to full-width (zenkaku).","extra":"[mode] accepts any combination of \"a\" (alphabet), \"n\" (numbers), \"k\" (katakana), \"s\" (spaces), \"p\" (punctuation), or \"all\".","examples":[{"html":"'ﾀﾛｳ YAMADAです!'.zenkaku()"},{"html":"'ﾀﾛｳ YAMADAです!'.zenkaku('a')"},{"html":"'ﾀﾛｳ YAMADAです!'.zenkaku('alphabet')"},{"html":"'ﾀﾛｳです! 25歳です!'.zenkaku('katakana', 'numbers')"},{"html":"'ﾀﾛｳです! 25歳です!'.zenkaku('k', 'n')"},{"html":"'ﾀﾛｳです! 25歳です!'.zenkaku('kn')"},{"html":"'ﾀﾛｳです! 25歳です!'.zenkaku('sp')"}]},"hiragana":{"params":[{"name":"all","type":"boolean","required":false,"default":"true"}],"line":219,"returns":"String","short":"Converts katakana into hiragana.","extra":"If [all] is false, only full-width katakana will be converted.","examples":[{"html":"'カタカナ'.hiragana()"},{"html":"'コンニチハ'.hiragana()"},{"html":"'ｶﾀｶﾅ'.hiragana()"},{"html":"'ｶﾀｶﾅ'.hiragana(false)"}]},"katakana":{"line":242,"returns":"String","short":"Converts hiragana into katakana.","examples":[{"html":"'かたかな'.katakana()"},{"html":"'こんにちは'.katakana()"}]}}},"dependency":"string","description":"Detecting language by character block. Full-width <-> half-width character conversion. Hiragana and Katakana conversions."}};
